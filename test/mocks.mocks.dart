// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i25;
import 'dart:io' as _i17;
import 'dart:ui' as _i15;

import 'package:application/athletes/use_cases/create_group_use_case.dart'
    as _i58;
import 'package:application/athletes/use_cases/create_new_athlete_use_case.dart'
    as _i57;
import 'package:application/settings/use_cases/get_all_settings_use_case.dart'
    as _i47;
import 'package:application/settings/use_cases/get_setting_use_case.dart'
    as _i48;
import 'package:application/settings/use_cases/save_setting_use_case.dart'
    as _i49;
import 'package:coach_app/core/app_state.dart' as _i7;
import 'package:coach_app/core/widgets/multi_filter.dart' as _i31;
import 'package:coach_app/features/athletes/infrastructure/services/avatar_generator_service.dart'
    as _i39;
import 'package:coach_app/features/athletes/presentation/models/athlete_view.dart'
    as _i12;
import 'package:coach_app/features/athletes/presentation/models/sport_view.dart'
    as _i28;
import 'package:coach_app/features/athletes/presentation/providers/athletes_view_model.dart'
    as _i30;
import 'package:coach_app/features/athletes/presentation/providers/sport_view_model.dart'
    as _i27;
import 'package:coach_app/features/settings/presentation/providers/settings_view_model.dart'
    as _i44;
import 'package:domain/features/athletes/data/athletes_service.dart' as _i50;
import 'package:domain/features/athletes/data/groups_service.dart' as _i52;
import 'package:domain/features/athletes/data/id_generator.dart' as _i53;
import 'package:domain/features/athletes/data/sports_service.dart' as _i35;
import 'package:domain/features/athletes/entities/athlete.dart' as _i18;
import 'package:domain/features/athletes/entities/group.dart' as _i19;
import 'package:domain/features/athletes/entities/group_role.dart' as _i43;
import 'package:domain/features/athletes/entities/sport.dart' as _i13;
import 'package:domain/features/athletes/repositories/athletes.dart' as _i55;
import 'package:domain/features/athletes/repositories/groups.dart' as _i41;
import 'package:domain/features/athletes/repositories/sports.dart' as _i38;
import 'package:domain/features/athletes/services/athlete_validation_service.dart'
    as _i56;
import 'package:domain/features/athletes/services/validation_library.dart'
    as _i20;
import 'package:domain/features/athletes/value_objects/athlete_filter_criteria.dart'
    as _i51;
import 'package:domain/features/athletes/value_objects/athlete_sort_criteria.dart'
    as _i9;
import 'package:domain/features/athletes/value_objects/groups_filter_criteria.dart'
    as _i42;
import 'package:domain/features/athletes/value_objects/sport_filter_criteria.dart'
    as _i29;
import 'package:domain/features/avatars/entities/avatar.dart' as _i14;
import 'package:domain/features/avatars/entities/image_data.dart' as _i34;
import 'package:domain/features/avatars/repositories/avatar_repository.dart'
    as _i40;
import 'package:domain/features/logging/entities/log_entry.dart' as _i37;
import 'package:domain/features/logging/repositories/logger.dart' as _i36;
import 'package:domain/features/settings/entities/setting.dart' as _i46;
import 'package:domain/features/shared/utilities/result.dart' as _i8;
import 'package:domain/features/shared/utilities/validation/validation_result.dart'
    as _i21;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i32;
import 'package:domain/features/shared/value_objects/sort_criteria.dart'
    as _i33;
import 'package:flutter/foundation.dart' as _i11;
import 'package:flutter/material.dart' as _i45;
import 'package:flutter/widgets.dart' as _i3;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i16;
import 'package:go_router/go_router.dart' as _i22;
import 'package:go_router/src/configuration.dart' as _i2;
import 'package:go_router/src/delegate.dart' as _i4;
import 'package:go_router/src/information_provider.dart' as _i5;
import 'package:go_router/src/match.dart' as _i24;
import 'package:go_router/src/parser.dart' as _i6;
import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i23;
import 'package:state_notifier/state_notifier.dart' as _i26;

import 'mocks.dart' as _i54;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRouteConfiguration_0 extends _i1.SmartFake
    implements _i2.RouteConfiguration {
  _FakeRouteConfiguration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBackButtonDispatcher_1 extends _i1.SmartFake
    implements _i3.BackButtonDispatcher {
  _FakeBackButtonDispatcher_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoRouterDelegate_2 extends _i1.SmartFake
    implements _i4.GoRouterDelegate {
  _FakeGoRouterDelegate_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoRouteInformationProvider_3 extends _i1.SmartFake
    implements _i5.GoRouteInformationProvider {
  _FakeGoRouteInformationProvider_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoRouteInformationParser_4 extends _i1.SmartFake
    implements _i6.GoRouteInformationParser {
  _FakeGoRouteInformationParser_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppState_5 extends _i1.SmartFake implements _i7.AppState {
  _FakeAppState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_6<T> extends _i1.SmartFake implements _i8.Result<T> {
  _FakeResult_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAthleteSortCriteria_7 extends _i1.SmartFake
    implements _i9.AthleteSortCriteria {
  _FakeAthleteSortCriteria_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePagingController_8<PageKeyType, ItemType> extends _i1.SmartFake
    implements _i10.PagingController<PageKeyType, ItemType> {
  _FakePagingController_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_9<T> extends _i1.SmartFake
    implements _i11.ValueNotifier<T> {
  _FakeValueNotifier_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAthleteView_10 extends _i1.SmartFake implements _i12.AthleteView {
  _FakeAthleteView_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSport_11 extends _i1.SmartFake implements _i13.Sport {
  _FakeSport_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAvatar_12 extends _i1.SmartFake implements _i14.Avatar {
  _FakeAvatar_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_13 extends _i1.SmartFake implements _i15.Locale {
  _FakeLocale_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAutoDisposeNotifierProviderRef_14<T> extends _i1.SmartFake
    implements _i16.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_15 extends _i1.SmartFake implements Uri {
  _FakeUri_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_16 extends _i1.SmartFake implements _i17.Directory {
  _FakeDirectory_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_17 extends _i1.SmartFake
    implements _i17.FileSystemEntity {
  _FakeFileSystemEntity_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_18 extends _i1.SmartFake implements _i17.FileStat {
  _FakeFileStat_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAthlete_19 extends _i1.SmartFake implements _i18.Athlete {
  _FakeAthlete_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGroup_20 extends _i1.SmartFake implements _i19.Group {
  _FakeGroup_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValidationLibrary_21 extends _i1.SmartFake
    implements _i20.ValidationLibrary {
  _FakeValidationLibrary_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValidationResult_22 extends _i1.SmartFake
    implements _i21.ValidationResult {
  _FakeValidationResult_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GoRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoRouter extends _i1.Mock implements _i22.GoRouter {
  MockGoRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RouteConfiguration get configuration => (super.noSuchMethod(
        Invocation.getter(#configuration),
        returnValue: _FakeRouteConfiguration_0(
          this,
          Invocation.getter(#configuration),
        ),
      ) as _i2.RouteConfiguration);

  @override
  set configuration(_i2.RouteConfiguration? _configuration) =>
      super.noSuchMethod(
        Invocation.setter(
          #configuration,
          _configuration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.BackButtonDispatcher get backButtonDispatcher => (super.noSuchMethod(
        Invocation.getter(#backButtonDispatcher),
        returnValue: _FakeBackButtonDispatcher_1(
          this,
          Invocation.getter(#backButtonDispatcher),
        ),
      ) as _i3.BackButtonDispatcher);

  @override
  _i4.GoRouterDelegate get routerDelegate => (super.noSuchMethod(
        Invocation.getter(#routerDelegate),
        returnValue: _FakeGoRouterDelegate_2(
          this,
          Invocation.getter(#routerDelegate),
        ),
      ) as _i4.GoRouterDelegate);

  @override
  set routerDelegate(_i4.GoRouterDelegate? _routerDelegate) =>
      super.noSuchMethod(
        Invocation.setter(
          #routerDelegate,
          _routerDelegate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.GoRouteInformationProvider get routeInformationProvider =>
      (super.noSuchMethod(
        Invocation.getter(#routeInformationProvider),
        returnValue: _FakeGoRouteInformationProvider_3(
          this,
          Invocation.getter(#routeInformationProvider),
        ),
      ) as _i5.GoRouteInformationProvider);

  @override
  set routeInformationProvider(
          _i5.GoRouteInformationProvider? _routeInformationProvider) =>
      super.noSuchMethod(
        Invocation.setter(
          #routeInformationProvider,
          _routeInformationProvider,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.GoRouteInformationParser get routeInformationParser =>
      (super.noSuchMethod(
        Invocation.getter(#routeInformationParser),
        returnValue: _FakeGoRouteInformationParser_4(
          this,
          Invocation.getter(#routeInformationParser),
        ),
      ) as _i6.GoRouteInformationParser);

  @override
  set routeInformationParser(
          _i6.GoRouteInformationParser? _routeInformationParser) =>
      super.noSuchMethod(
        Invocation.setter(
          #routeInformationParser,
          _routeInformationParser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get overridePlatformDefaultLocation => (super.noSuchMethod(
        Invocation.getter(#overridePlatformDefaultLocation),
        returnValue: false,
      ) as bool);

  @override
  bool canPop() => (super.noSuchMethod(
        Invocation.method(
          #canPop,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  String namedLocation(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedLocation,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.method(
            #namedLocation,
            [name],
            {
              #pathParameters: pathParameters,
              #queryParameters: queryParameters,
            },
          ),
        ),
      ) as String);

  @override
  void go(
    String? location, {
    Object? extra,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #go,
          [location],
          {#extra: extra},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void restore(_i24.RouteMatchList? matchList) => super.noSuchMethod(
        Invocation.method(
          #restore,
          [matchList],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goNamed(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #goNamed,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #extra: extra,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.Future<T?> push<T extends Object?>(
    String? location, {
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [location],
          {#extra: extra},
        ),
        returnValue: _i25.Future<T?>.value(),
      ) as _i25.Future<T?>);

  @override
  _i25.Future<T?> pushNamed<T extends Object?>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamed,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #extra: extra,
          },
        ),
        returnValue: _i25.Future<T?>.value(),
      ) as _i25.Future<T?>);

  @override
  _i25.Future<T?> pushReplacement<T extends Object?>(
    String? location, {
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacement,
          [location],
          {#extra: extra},
        ),
        returnValue: _i25.Future<T?>.value(),
      ) as _i25.Future<T?>);

  @override
  _i25.Future<T?> pushReplacementNamed<T extends Object?>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacementNamed,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #extra: extra,
          },
        ),
        returnValue: _i25.Future<T?>.value(),
      ) as _i25.Future<T?>);

  @override
  _i25.Future<T?> replace<T>(
    String? location, {
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replace,
          [location],
          {#extra: extra},
        ),
        returnValue: _i25.Future<T?>.value(),
      ) as _i25.Future<T?>);

  @override
  _i25.Future<T?> replaceNamed<T>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceNamed,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #extra: extra,
          },
        ),
        returnValue: _i25.Future<T?>.value(),
      ) as _i25.Future<T?>);

  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppState extends _i1.Mock implements _i7.AppState {
  MockAppState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setConnectivityStatus(bool? isConnected) => super.noSuchMethod(
        Invocation.method(
          #setConnectivityStatus,
          [isConnected],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i15.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i15.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppStateNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStateNotifier extends _i1.Mock implements _i7.AppStateNotifier {
  MockAppStateNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i16.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i25.Stream<_i7.AppState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i25.Stream<_i7.AppState>.empty(),
      ) as _i25.Stream<_i7.AppState>);

  @override
  _i7.AppState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAppState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.AppState);

  @override
  set state(_i7.AppState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.AppState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeAppState_5(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i7.AppState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setConnectivityStatus(bool? isConnected) => super.noSuchMethod(
        Invocation.method(
          #setConnectivityStatus,
          [isConnected],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i7.AppState? old,
    _i7.AppState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i16.RemoveListener addListener(
    _i26.Listener<_i7.AppState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i16.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SportViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSportViewModel extends _i1.Mock implements _i27.SportViewModel {
  MockSportViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i16.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i25.Stream<_i16.AsyncValue<List<_i28.SportView>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i25.Stream<_i16.AsyncValue<List<_i28.SportView>>>.empty(),
      ) as _i25.Stream<_i16.AsyncValue<List<_i28.SportView>>>);

  @override
  _i16.AsyncValue<List<_i28.SportView>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i23.dummyValue<_i16.AsyncValue<List<_i28.SportView>>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i16.AsyncValue<List<_i28.SportView>>);

  @override
  set state(_i16.AsyncValue<List<_i28.SportView>>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.AsyncValue<List<_i28.SportView>> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _i23.dummyValue<_i16.AsyncValue<List<_i28.SportView>>>(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i16.AsyncValue<List<_i28.SportView>>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i25.Future<void> fetchSports({_i29.SportFilterCriteria? filterCriteria}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSports,
          [],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<_i8.Result<_i13.Sport>> addSport(_i13.Sport? sport) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSport,
          [sport],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i13.Sport>>.value(_FakeResult_6<_i13.Sport>(
          this,
          Invocation.method(
            #addSport,
            [sport],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i13.Sport>>);

  @override
  _i25.Future<_i8.Result<_i13.Sport>> updateSport(_i13.Sport? sport) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSport,
          [sport],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i13.Sport>>.value(_FakeResult_6<_i13.Sport>(
          this,
          Invocation.method(
            #updateSport,
            [sport],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i13.Sport>>);

  @override
  _i25.Future<_i8.Result<_i13.Sport>> getSportById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportById,
          [id],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i13.Sport>>.value(_FakeResult_6<_i13.Sport>(
          this,
          Invocation.method(
            #getSportById,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i13.Sport>>);

  @override
  _i25.Future<_i8.Result<List<_i13.Sport>>> getSportsByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByIds,
          [ids],
        ),
        returnValue: _i25.Future<_i8.Result<List<_i13.Sport>>>.value(
            _FakeResult_6<List<_i13.Sport>>(
          this,
          Invocation.method(
            #getSportsByIds,
            [ids],
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i13.Sport>>>);

  @override
  bool updateShouldNotify(
    _i16.AsyncValue<List<_i28.SportView>>? old,
    _i16.AsyncValue<List<_i28.SportView>>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i16.RemoveListener addListener(
    _i26.Listener<_i16.AsyncValue<List<_i28.SportView>>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i16.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AthletesViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthletesViewModel extends _i1.Mock implements _i30.AthletesViewModel {
  MockAthletesViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentSports(List<_i31.FilterOption>? _currentSports) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentSports,
          _currentSports,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set r(int? _r) => super.noSuchMethod(
        Invocation.setter(
          #r,
          _r,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get currentArchivedFilter => (super.noSuchMethod(
        Invocation.getter(#currentArchivedFilter),
        returnValue: false,
      ) as bool);

  @override
  _i9.AthleteSortCriteria get currentSort => (super.noSuchMethod(
        Invocation.getter(#currentSort),
        returnValue: _FakeAthleteSortCriteria_7(
          this,
          Invocation.getter(#currentSort),
        ),
      ) as _i9.AthleteSortCriteria);

  @override
  bool get hasActiveFilters => (super.noSuchMethod(
        Invocation.getter(#hasActiveFilters),
        returnValue: false,
      ) as bool);

  @override
  _i10.PagingController<int, _i12.AthleteView> get pagingController =>
      (super.noSuchMethod(
        Invocation.getter(#pagingController),
        returnValue: _FakePagingController_8<int, _i12.AthleteView>(
          this,
          Invocation.getter(#pagingController),
        ),
      ) as _i10.PagingController<int, _i12.AthleteView>);

  @override
  set pagingController(
          _i10.PagingController<int, _i12.AthleteView>? _pagingController) =>
      super.noSuchMethod(
        Invocation.setter(
          #pagingController,
          _pagingController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.ValueNotifier<bool> get hasActiveFiltersNotifier => (super.noSuchMethod(
        Invocation.getter(#hasActiveFiltersNotifier),
        returnValue: _FakeValueNotifier_9<bool>(
          this,
          Invocation.getter(#hasActiveFiltersNotifier),
        ),
      ) as _i11.ValueNotifier<bool>);

  @override
  set onError(_i16.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i25.Stream<_i16.AsyncValue<void>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i25.Stream<_i16.AsyncValue<void>>.empty(),
      ) as _i25.Stream<_i16.AsyncValue<void>>);

  @override
  _i16.AsyncValue<void> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i23.dummyValue<_i16.AsyncValue<void>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i16.AsyncValue<void>);

  @override
  set state(_i16.AsyncValue<void>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.AsyncValue<void> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _i23.dummyValue<_i16.AsyncValue<void>>(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i16.AsyncValue<void>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setCurrentGroupId(String? groupId) => super.noSuchMethod(
        Invocation.method(
          #setCurrentGroupId,
          [groupId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.Future<_i8.Result<List<_i18.Athlete>>> fetchItems(
    int? pageKey,
    int? pageSize, {
    _i32.FilterCriteria? filterCriteria,
    _i33.SortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchItems,
          [
            pageKey,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i25.Future<_i8.Result<List<_i18.Athlete>>>.value(
            _FakeResult_6<List<_i18.Athlete>>(
          this,
          Invocation.method(
            #fetchItems,
            [
              pageKey,
              pageSize,
            ],
            {
              #filterCriteria: filterCriteria,
              #sortCriteria: sortCriteria,
            },
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i18.Athlete>>>);

  @override
  void updateNameFilter(String? name) => super.noSuchMethod(
        Invocation.method(
          #updateNameFilter,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateFilters({List<_i31.FilterOption>? sports}) => super.noSuchMethod(
        Invocation.method(
          #updateFilters,
          [],
          {#sports: sports},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateArchivedFilter({required bool? isArchived}) => super.noSuchMethod(
        Invocation.method(
          #updateArchivedFilter,
          [],
          {#isArchived: isArchived},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAllFilters() => super.noSuchMethod(
        Invocation.method(
          #clearAllFilters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSort(String? field) => super.noSuchMethod(
        Invocation.method(
          #updateSort,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.AthleteView convertItem(_i18.Athlete? item) => (super.noSuchMethod(
        Invocation.method(
          #convertItem,
          [item],
        ),
        returnValue: _FakeAthleteView_10(
          this,
          Invocation.method(
            #convertItem,
            [item],
          ),
        ),
      ) as _i12.AthleteView);

  @override
  _i25.Future<_i8.Result<void>> deleteItemFromService(_i12.AthleteView? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteItemFromService,
          [item],
        ),
        returnValue: _i25.Future<_i8.Result<void>>.value(_FakeResult_6<void>(
          this,
          Invocation.method(
            #deleteItemFromService,
            [item],
          ),
        )),
      ) as _i25.Future<_i8.Result<void>>);

  @override
  _i25.Future<_i8.Result<_i12.AthleteView>> addAthlete(
    Map<String, dynamic>? athlete,
    List<String>? sportIds,
    _i34.ImageData? avatar,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAthlete,
          [
            athlete,
            sportIds,
            avatar,
          ],
        ),
        returnValue: _i25.Future<_i8.Result<_i12.AthleteView>>.value(
            _FakeResult_6<_i12.AthleteView>(
          this,
          Invocation.method(
            #addAthlete,
            [
              athlete,
              sportIds,
              avatar,
            ],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i12.AthleteView>>);

  @override
  _i25.Future<_i8.Result<void>> updateAthlete(
    _i18.Athlete? athlete,
    Map<String, dynamic>? athleteData,
    _i34.ImageData? avatar,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAthlete,
          [
            athlete,
            athleteData,
            avatar,
          ],
        ),
        returnValue: _i25.Future<_i8.Result<void>>.value(_FakeResult_6<void>(
          this,
          Invocation.method(
            #updateAthlete,
            [
              athlete,
              athleteData,
              avatar,
            ],
          ),
        )),
      ) as _i25.Future<_i8.Result<void>>);

  @override
  _i25.Future<_i8.Result<_i18.Athlete>> getAthleteById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthleteById,
          [id],
        ),
        returnValue: _i25.Future<_i8.Result<_i18.Athlete>>.value(
            _FakeResult_6<_i18.Athlete>(
          this,
          Invocation.method(
            #getAthleteById,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i18.Athlete>>);

  @override
  _i25.Future<bool> restoreAthlete(_i12.AthleteView? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreAthlete,
          [athlete],
        ),
        returnValue: _i25.Future<bool>.value(false),
      ) as _i25.Future<bool>);

  @override
  void applyCriteria({
    _i32.FilterCriteria? filterCriteria,
    _i33.SortCriteria? sortCriteria,
    bool? reload = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #applyCriteria,
          [],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
            #reload: reload,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.Future<bool> deleteItem(_i12.AthleteView? item) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [item],
        ),
        returnValue: _i25.Future<bool>.value(false),
      ) as _i25.Future<bool>);

  @override
  void updateHasActiveFilters({required bool? hasActiveFilters}) =>
      super.noSuchMethod(
        Invocation.method(
          #updateHasActiveFilters,
          [],
          {#hasActiveFilters: hasActiveFilters},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i16.AsyncValue<void>? old,
    _i16.AsyncValue<void>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i16.RemoveListener addListener(
    _i26.Listener<_i16.AsyncValue<void>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i16.RemoveListener);
}

/// A class which mocks [SportsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSportsService extends _i1.Mock implements _i35.SportsService {
  MockSportsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<List<_i13.Sport>> getAllSports(
          {_i29.SportFilterCriteria? filterCriteria}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSports,
          [],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i25.Future<List<_i13.Sport>>.value(<_i13.Sport>[]),
      ) as _i25.Future<List<_i13.Sport>>);

  @override
  _i25.Future<List<_i13.Sport>> getSportsByPage(
    int? page,
    int? pageSize, {
    _i29.SportFilterCriteria? filterCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByPage,
          [
            page,
            pageSize,
          ],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i25.Future<List<_i13.Sport>>.value(<_i13.Sport>[]),
      ) as _i25.Future<List<_i13.Sport>>);

  @override
  _i25.Future<List<_i13.Sport>> getSportsByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByIds,
          [ids],
        ),
        returnValue: _i25.Future<List<_i13.Sport>>.value(<_i13.Sport>[]),
      ) as _i25.Future<List<_i13.Sport>>);

  @override
  _i25.Future<_i13.Sport> createSport(_i13.Sport? sport) => (super.noSuchMethod(
        Invocation.method(
          #createSport,
          [sport],
        ),
        returnValue: _i25.Future<_i13.Sport>.value(_FakeSport_11(
          this,
          Invocation.method(
            #createSport,
            [sport],
          ),
        )),
      ) as _i25.Future<_i13.Sport>);

  @override
  _i25.Future<void> deleteSport(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSport,
          [id],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<_i13.Sport> getSportById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSportById,
          [id],
        ),
        returnValue: _i25.Future<_i13.Sport>.value(_FakeSport_11(
          this,
          Invocation.method(
            #getSportById,
            [id],
          ),
        )),
      ) as _i25.Future<_i13.Sport>);

  @override
  _i25.Future<_i13.Sport> updateSport(_i13.Sport? sport) => (super.noSuchMethod(
        Invocation.method(
          #updateSport,
          [sport],
        ),
        returnValue: _i25.Future<_i13.Sport>.value(_FakeSport_11(
          this,
          Invocation.method(
            #updateSport,
            [sport],
          ),
        )),
      ) as _i25.Future<_i13.Sport>);
}

/// A class which mocks [LoggerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerRepository extends _i1.Mock implements _i36.LoggerRepository {
  MockLoggerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Stream<_i37.LogEntry> get logStream => (super.noSuchMethod(
        Invocation.getter(#logStream),
        returnValue: _i25.Stream<_i37.LogEntry>.empty(),
      ) as _i25.Stream<_i37.LogEntry>);

  @override
  void debug(String? message) => super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message) => super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message) => super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.Future<List<_i37.LogEntry>> getLogsByPage(
    int? page,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogsByPage,
          [
            page,
            pageSize,
          ],
        ),
        returnValue: _i25.Future<List<_i37.LogEntry>>.value(<_i37.LogEntry>[]),
      ) as _i25.Future<List<_i37.LogEntry>>);
}

/// A class which mocks [Sports].
///
/// See the documentation for Mockito's code generation for more information.
class MockSports extends _i1.Mock implements _i38.Sports {
  MockSports() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<_i8.Result<List<_i13.Sport>>> getAllSports(
          {_i29.SportFilterCriteria? filterCriteria}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSports,
          [],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i25.Future<_i8.Result<List<_i13.Sport>>>.value(
            _FakeResult_6<List<_i13.Sport>>(
          this,
          Invocation.method(
            #getAllSports,
            [],
            {#filterCriteria: filterCriteria},
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i13.Sport>>>);

  @override
  _i25.Future<_i8.Result<List<_i13.Sport>>> getSportsByPage(
    int? page,
    int? pageSize, {
    _i29.SportFilterCriteria? filterCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByPage,
          [
            page,
            pageSize,
          ],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i25.Future<_i8.Result<List<_i13.Sport>>>.value(
            _FakeResult_6<List<_i13.Sport>>(
          this,
          Invocation.method(
            #getSportsByPage,
            [
              page,
              pageSize,
            ],
            {#filterCriteria: filterCriteria},
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i13.Sport>>>);

  @override
  _i25.Future<_i8.Result<List<_i13.Sport>>> getSportsByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByIds,
          [ids],
        ),
        returnValue: _i25.Future<_i8.Result<List<_i13.Sport>>>.value(
            _FakeResult_6<List<_i13.Sport>>(
          this,
          Invocation.method(
            #getSportsByIds,
            [ids],
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i13.Sport>>>);

  @override
  _i25.Future<_i8.Result<_i13.Sport>> createSport(_i13.Sport? sport) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSport,
          [sport],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i13.Sport>>.value(_FakeResult_6<_i13.Sport>(
          this,
          Invocation.method(
            #createSport,
            [sport],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i13.Sport>>);

  @override
  _i25.Future<_i8.Result<void>> deleteSport(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSport,
          [id],
        ),
        returnValue: _i25.Future<_i8.Result<void>>.value(_FakeResult_6<void>(
          this,
          Invocation.method(
            #deleteSport,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<void>>);

  @override
  _i25.Future<_i8.Result<_i13.Sport>> getSportById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportById,
          [id],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i13.Sport>>.value(_FakeResult_6<_i13.Sport>(
          this,
          Invocation.method(
            #getSportById,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i13.Sport>>);

  @override
  _i25.Future<_i8.Result<_i13.Sport>> updateSport(_i13.Sport? sport) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSport,
          [sport],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i13.Sport>>.value(_FakeResult_6<_i13.Sport>(
          this,
          Invocation.method(
            #updateSport,
            [sport],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i13.Sport>>);
}

/// A class which mocks [AvatarGeneratorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAvatarGeneratorService extends _i1.Mock
    implements _i39.AvatarGeneratorService {
  MockAvatarGeneratorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generateAvatar() => (super.noSuchMethod(
        Invocation.method(
          #generateAvatar,
          [],
        ),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.method(
            #generateAvatar,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [AvatarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAvatarRepository extends _i1.Mock implements _i40.AvatarRepository {
  MockAvatarRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<_i14.Avatar> saveAvatar(
    String? id,
    _i34.ImageData? imageData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAvatar,
          [
            id,
            imageData,
          ],
        ),
        returnValue: _i25.Future<_i14.Avatar>.value(_FakeAvatar_12(
          this,
          Invocation.method(
            #saveAvatar,
            [
              id,
              imageData,
            ],
          ),
        )),
      ) as _i25.Future<_i14.Avatar>);

  @override
  _i25.Future<_i34.ImageData?> getAvatarImage(String? avatarId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvatarImage,
          [avatarId],
        ),
        returnValue: _i25.Future<_i34.ImageData?>.value(),
      ) as _i25.Future<_i34.ImageData?>);

  @override
  _i25.Future<void> downloadAvatar(
    String? avatarId,
    String? remoteUrl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadAvatar,
          [
            avatarId,
            remoteUrl,
          ],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<void> markAvatarAsSynced(_i14.Avatar? avatar) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAvatarAsSynced,
          [avatar],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<_i14.Avatar> getAvatar(String? avatarId) => (super.noSuchMethod(
        Invocation.method(
          #getAvatar,
          [avatarId],
        ),
        returnValue: _i25.Future<_i14.Avatar>.value(_FakeAvatar_12(
          this,
          Invocation.method(
            #getAvatar,
            [avatarId],
          ),
        )),
      ) as _i25.Future<_i14.Avatar>);
}

/// A class which mocks [Groups].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroups extends _i1.Mock implements _i41.Groups {
  MockGroups() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<_i8.Result<List<_i19.Group>>> getAllGroups() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGroups,
          [],
        ),
        returnValue: _i25.Future<_i8.Result<List<_i19.Group>>>.value(
            _FakeResult_6<List<_i19.Group>>(
          this,
          Invocation.method(
            #getAllGroups,
            [],
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i19.Group>>>);

  @override
  _i25.Future<_i8.Result<List<_i19.Group>>> getGroupsByPage(
    int? page,
    int? pageSize, {
    _i42.GroupsFilterCriteria? filterCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsByPage,
          [
            page,
            pageSize,
          ],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i25.Future<_i8.Result<List<_i19.Group>>>.value(
            _FakeResult_6<List<_i19.Group>>(
          this,
          Invocation.method(
            #getGroupsByPage,
            [
              page,
              pageSize,
            ],
            {#filterCriteria: filterCriteria},
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i19.Group>>>);

  @override
  _i25.Future<_i8.Result<_i19.Group>> getGroupById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupById,
          [id],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i19.Group>>.value(_FakeResult_6<_i19.Group>(
          this,
          Invocation.method(
            #getGroupById,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i19.Group>>);

  @override
  _i25.Future<_i8.Result<_i19.Group>> createGroup(
    String? name,
    String? description,
    _i13.Sport? sport,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [
            name,
            description,
            sport,
          ],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i19.Group>>.value(_FakeResult_6<_i19.Group>(
          this,
          Invocation.method(
            #createGroup,
            [
              name,
              description,
              sport,
            ],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i19.Group>>);

  @override
  _i25.Future<_i8.Result<_i19.Group>> updateGroup(_i19.Group? group) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [group],
        ),
        returnValue:
            _i25.Future<_i8.Result<_i19.Group>>.value(_FakeResult_6<_i19.Group>(
          this,
          Invocation.method(
            #updateGroup,
            [group],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i19.Group>>);

  @override
  _i25.Future<_i8.Result<void>> deleteGroup(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [id],
        ),
        returnValue: _i25.Future<_i8.Result<void>>.value(_FakeResult_6<void>(
          this,
          Invocation.method(
            #deleteGroup,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<void>>);

  @override
  _i25.Future<_i8.Result<void>> restoreGroup(String? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreGroup,
          [id],
        ),
        returnValue: _i25.Future<_i8.Result<void>>.value(_FakeResult_6<void>(
          this,
          Invocation.method(
            #restoreGroup,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<void>>);

  @override
  _i25.Future<_i8.Result<List<_i43.GroupRole>>> getAllRoles() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRoles,
          [],
        ),
        returnValue: _i25.Future<_i8.Result<List<_i43.GroupRole>>>.value(
            _FakeResult_6<List<_i43.GroupRole>>(
          this,
          Invocation.method(
            #getAllRoles,
            [],
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i43.GroupRole>>>);
}

/// A class which mocks [SettingsViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsViewModel extends _i1.Mock implements _i44.SettingsViewModel {
  MockSettingsViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i45.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i45.ThemeMode.system,
      ) as _i45.ThemeMode);

  @override
  String get language => (super.noSuchMethod(
        Invocation.getter(#language),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.getter(#language),
        ),
      ) as String);

  @override
  _i15.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_13(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i15.Locale);

  @override
  List<_i15.Locale> get supportedLocales => (super.noSuchMethod(
        Invocation.getter(#supportedLocales),
        returnValue: <_i15.Locale>[],
      ) as List<_i15.Locale>);

  @override
  _i16.AutoDisposeNotifierProviderRef<_i16.AsyncValue<List<_i46.Setting>>>
      get ref => (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeAutoDisposeNotifierProviderRef_14<
                _i16.AsyncValue<List<_i46.Setting>>>(
              this,
              Invocation.getter(#ref),
            ),
          ) as _i16.AutoDisposeNotifierProviderRef<
              _i16.AsyncValue<List<_i46.Setting>>>);

  @override
  _i16.AsyncValue<List<_i46.Setting>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i23.dummyValue<_i16.AsyncValue<List<_i46.Setting>>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i16.AsyncValue<List<_i46.Setting>>);

  @override
  set state(_i16.AsyncValue<List<_i46.Setting>>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.AsyncValue<List<_i46.Setting>> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i23.dummyValue<_i16.AsyncValue<List<_i46.Setting>>>(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i16.AsyncValue<List<_i46.Setting>>);

  @override
  _i25.Future<void> updateSetting(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSetting,
          [
            key,
            value,
          ],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<_i46.Setting?> getSetting(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getSetting,
          [key],
        ),
        returnValue: _i25.Future<_i46.Setting?>.value(),
      ) as _i25.Future<_i46.Setting?>);

  @override
  _i25.Future<void> setLanguage(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #setLanguage,
          [languageCode],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  bool updateShouldNotify(
    _i16.AsyncValue<List<_i46.Setting>>? previous,
    _i16.AsyncValue<List<_i46.Setting>>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [GetAllSettingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllSettingsUseCase extends _i1.Mock
    implements _i47.GetAllSettingsUseCase {
  MockGetAllSettingsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<List<_i46.Setting>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i25.Future<List<_i46.Setting>>.value(<_i46.Setting>[]),
      ) as _i25.Future<List<_i46.Setting>>);
}

/// A class which mocks [GetSettingUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSettingUseCase extends _i1.Mock implements _i48.GetSettingUseCase {
  MockGetSettingUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<_i46.Setting?> execute(String? key) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [key],
        ),
        returnValue: _i25.Future<_i46.Setting?>.value(),
      ) as _i25.Future<_i46.Setting?>);
}

/// A class which mocks [SaveSettingUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveSettingUseCase extends _i1.Mock
    implements _i49.SaveSettingUseCase {
  MockSaveSettingUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<void> execute(_i46.Setting? setting) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [setting],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i17.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_15(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  _i17.Directory get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeDirectory_16(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i17.Directory);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);

  @override
  _i17.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_16(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i17.Directory);

  @override
  _i25.Future<_i17.Directory> create({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#recursive: recursive},
        ),
        returnValue: _i25.Future<_i17.Directory>.value(_FakeDirectory_16(
          this,
          Invocation.method(
            #create,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i25.Future<_i17.Directory>);

  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.Future<_i17.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTemp,
          [prefix],
        ),
        returnValue: _i25.Future<_i17.Directory>.value(_FakeDirectory_16(
          this,
          Invocation.method(
            #createTemp,
            [prefix],
          ),
        )),
      ) as _i25.Future<_i17.Directory>);

  @override
  _i17.Directory createTempSync([String? prefix]) => (super.noSuchMethod(
        Invocation.method(
          #createTempSync,
          [prefix],
        ),
        returnValue: _FakeDirectory_16(
          this,
          Invocation.method(
            #createTempSync,
            [prefix],
          ),
        ),
      ) as _i17.Directory);

  @override
  _i25.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i25.Future<String>.value(_i23.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i25.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i25.Future<_i17.Directory> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i25.Future<_i17.Directory>.value(_FakeDirectory_16(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i25.Future<_i17.Directory>);

  @override
  _i17.Directory renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeDirectory_16(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i17.Directory);

  @override
  _i25.Future<_i17.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i25.Future<_i17.FileSystemEntity>.value(_FakeFileSystemEntity_17(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i25.Future<_i17.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.Stream<_i17.FileSystemEntity> list({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: _i25.Stream<_i17.FileSystemEntity>.empty(),
      ) as _i25.Stream<_i17.FileSystemEntity>);

  @override
  List<_i17.FileSystemEntity> listSync({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listSync,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: <_i17.FileSystemEntity>[],
      ) as List<_i17.FileSystemEntity>);

  @override
  _i25.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i25.Future<bool>.value(false),
      ) as _i25.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i25.Future<_i17.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i25.Future<_i17.FileStat>.value(_FakeFileStat_18(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i25.Future<_i17.FileStat>);

  @override
  _i17.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_18(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i17.FileStat);

  @override
  _i25.Stream<_i17.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i25.Stream<_i17.FileSystemEvent>.empty(),
      ) as _i25.Stream<_i17.FileSystemEvent>);
}

/// A class which mocks [AthletesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthletesService extends _i1.Mock implements _i50.AthletesService {
  MockAthletesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<List<_i18.Athlete>> getAllAthletes() => (super.noSuchMethod(
        Invocation.method(
          #getAllAthletes,
          [],
        ),
        returnValue: _i25.Future<List<_i18.Athlete>>.value(<_i18.Athlete>[]),
      ) as _i25.Future<List<_i18.Athlete>>);

  @override
  _i25.Future<List<_i18.Athlete>> getAthletesByPage(
    int? page,
    int? pageSize, {
    _i51.AthleteFilterCriteria? filterCriteria,
    _i9.AthleteSortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByPage,
          [
            page,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i25.Future<List<_i18.Athlete>>.value(<_i18.Athlete>[]),
      ) as _i25.Future<List<_i18.Athlete>>);

  @override
  _i25.Future<List<_i18.Athlete>> getAthletesByFilterCriteria(
          _i32.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i25.Future<List<_i18.Athlete>>.value(<_i18.Athlete>[]),
      ) as _i25.Future<List<_i18.Athlete>>);

  @override
  _i25.Future<_i18.Athlete> getAthleteById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getAthleteById,
          [id],
        ),
        returnValue: _i25.Future<_i18.Athlete>.value(_FakeAthlete_19(
          this,
          Invocation.method(
            #getAthleteById,
            [id],
          ),
        )),
      ) as _i25.Future<_i18.Athlete>);

  @override
  _i25.Future<_i18.Athlete> createAthlete(_i18.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAthlete,
          [athlete],
        ),
        returnValue: _i25.Future<_i18.Athlete>.value(_FakeAthlete_19(
          this,
          Invocation.method(
            #createAthlete,
            [athlete],
          ),
        )),
      ) as _i25.Future<_i18.Athlete>);

  @override
  _i25.Future<_i18.Athlete> updateAthlete(_i18.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAthlete,
          [athlete],
        ),
        returnValue: _i25.Future<_i18.Athlete>.value(_FakeAthlete_19(
          this,
          Invocation.method(
            #updateAthlete,
            [athlete],
          ),
        )),
      ) as _i25.Future<_i18.Athlete>);

  @override
  _i25.Future<void> deleteAthlete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAthlete,
          [id],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<_i18.Athlete> restoreAthlete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreAthlete,
          [id],
        ),
        returnValue: _i25.Future<_i18.Athlete>.value(_FakeAthlete_19(
          this,
          Invocation.method(
            #restoreAthlete,
            [id],
          ),
        )),
      ) as _i25.Future<_i18.Athlete>);

  @override
  _i25.Future<List<_i18.Athlete>> getAthletesByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByIds,
          [ids],
        ),
        returnValue: _i25.Future<List<_i18.Athlete>>.value(<_i18.Athlete>[]),
      ) as _i25.Future<List<_i18.Athlete>>);

  @override
  _i25.Future<void> resetAndRefreshDatabase() => (super.noSuchMethod(
        Invocation.method(
          #resetAndRefreshDatabase,
          [],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<void> initializeDatabase() => (super.noSuchMethod(
        Invocation.method(
          #initializeDatabase,
          [],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);
}

/// A class which mocks [GroupsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupsService extends _i1.Mock implements _i52.GroupsService {
  MockGroupsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<List<_i19.Group>> getAllGroups() => (super.noSuchMethod(
        Invocation.method(
          #getAllGroups,
          [],
        ),
        returnValue: _i25.Future<List<_i19.Group>>.value(<_i19.Group>[]),
      ) as _i25.Future<List<_i19.Group>>);

  @override
  _i25.Future<List<_i19.Group>> getGroupsByPage(
    int? page,
    int? pageSize, {
    _i42.GroupsFilterCriteria? filterCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsByPage,
          [
            page,
            pageSize,
          ],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i25.Future<List<_i19.Group>>.value(<_i19.Group>[]),
      ) as _i25.Future<List<_i19.Group>>);

  @override
  _i25.Future<List<_i19.Group>> getGroupsByFilterCriteria(
          _i32.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i25.Future<List<_i19.Group>>.value(<_i19.Group>[]),
      ) as _i25.Future<List<_i19.Group>>);

  @override
  _i25.Future<_i19.Group?> getGroupById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getGroupById,
          [id],
        ),
        returnValue: _i25.Future<_i19.Group?>.value(),
      ) as _i25.Future<_i19.Group?>);

  @override
  _i25.Future<_i19.Group> createGroup(_i19.Group? group) => (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [group],
        ),
        returnValue: _i25.Future<_i19.Group>.value(_FakeGroup_20(
          this,
          Invocation.method(
            #createGroup,
            [group],
          ),
        )),
      ) as _i25.Future<_i19.Group>);

  @override
  _i25.Future<_i19.Group> updateGroup(_i19.Group? group) => (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [group],
        ),
        returnValue: _i25.Future<_i19.Group>.value(_FakeGroup_20(
          this,
          Invocation.method(
            #updateGroup,
            [group],
          ),
        )),
      ) as _i25.Future<_i19.Group>);

  @override
  _i25.Future<void> deleteGroup(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [id],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<void> restoreGroup(String? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreGroup,
          [id],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);

  @override
  _i25.Future<void> initializeDatabase() => (super.noSuchMethod(
        Invocation.method(
          #initializeDatabase,
          [],
        ),
        returnValue: _i25.Future<void>.value(),
        returnValueForMissingStub: _i25.Future<void>.value(),
      ) as _i25.Future<void>);
}

/// A class which mocks [IdGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdGenerator extends _i1.Mock implements _i53.IdGenerator {
  MockIdGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generate() => (super.noSuchMethod(
        Invocation.method(
          #generate,
          [],
        ),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.method(
            #generate,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [GroupRoles].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupRoles extends _i1.Mock implements _i54.GroupRoles {
  MockGroupRoles() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [Athletes].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthletes extends _i1.Mock implements _i55.Athletes {
  MockAthletes() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<_i8.Result<List<_i18.Athlete>>> getAllAthletes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAthletes,
          [],
        ),
        returnValue: _i25.Future<_i8.Result<List<_i18.Athlete>>>.value(
            _FakeResult_6<List<_i18.Athlete>>(
          this,
          Invocation.method(
            #getAllAthletes,
            [],
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i18.Athlete>>>);

  @override
  _i25.Future<_i8.Result<List<_i18.Athlete>>> getAthletesByFilterCriteria(
          _i32.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i25.Future<_i8.Result<List<_i18.Athlete>>>.value(
            _FakeResult_6<List<_i18.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByFilterCriteria,
            [filterCriteria],
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i18.Athlete>>>);

  @override
  _i25.Future<_i8.Result<List<_i18.Athlete>>> getAthletesByPage(
    int? page,
    int? pageSize, {
    _i51.AthleteFilterCriteria? filterCriteria,
    _i9.AthleteSortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByPage,
          [
            page,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i25.Future<_i8.Result<List<_i18.Athlete>>>.value(
            _FakeResult_6<List<_i18.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByPage,
            [
              page,
              pageSize,
            ],
            {
              #filterCriteria: filterCriteria,
              #sortCriteria: sortCriteria,
            },
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i18.Athlete>>>);

  @override
  _i25.Future<_i8.Result<_i18.Athlete>> getAthleteById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthleteById,
          [id],
        ),
        returnValue: _i25.Future<_i8.Result<_i18.Athlete>>.value(
            _FakeResult_6<_i18.Athlete>(
          this,
          Invocation.method(
            #getAthleteById,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i18.Athlete>>);

  @override
  _i25.Future<_i8.Result<_i18.Athlete>> addAthlete(_i18.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAthlete,
          [athlete],
        ),
        returnValue: _i25.Future<_i8.Result<_i18.Athlete>>.value(
            _FakeResult_6<_i18.Athlete>(
          this,
          Invocation.method(
            #addAthlete,
            [athlete],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i18.Athlete>>);

  @override
  _i25.Future<_i8.Result<void>> updateAthlete(_i18.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAthlete,
          [athlete],
        ),
        returnValue: _i25.Future<_i8.Result<void>>.value(_FakeResult_6<void>(
          this,
          Invocation.method(
            #updateAthlete,
            [athlete],
          ),
        )),
      ) as _i25.Future<_i8.Result<void>>);

  @override
  _i25.Future<_i8.Result<void>> deleteAthlete(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAthlete,
          [id],
        ),
        returnValue: _i25.Future<_i8.Result<void>>.value(_FakeResult_6<void>(
          this,
          Invocation.method(
            #deleteAthlete,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<void>>);

  @override
  _i25.Future<_i8.Result<List<_i18.Athlete>>> getAthletesByIds(
          List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByIds,
          [ids],
        ),
        returnValue: _i25.Future<_i8.Result<List<_i18.Athlete>>>.value(
            _FakeResult_6<List<_i18.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByIds,
            [ids],
          ),
        )),
      ) as _i25.Future<_i8.Result<List<_i18.Athlete>>>);

  @override
  _i25.Future<_i8.Result<void>> restoreAthlete(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreAthlete,
          [id],
        ),
        returnValue: _i25.Future<_i8.Result<void>>.value(_FakeResult_6<void>(
          this,
          Invocation.method(
            #restoreAthlete,
            [id],
          ),
        )),
      ) as _i25.Future<_i8.Result<void>>);
}

/// A class which mocks [AthleteValidationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthleteValidationService extends _i1.Mock
    implements _i56.AthleteValidationService {
  MockAthleteValidationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.ValidationLibrary get validationLibrary => (super.noSuchMethod(
        Invocation.getter(#validationLibrary),
        returnValue: _FakeValidationLibrary_21(
          this,
          Invocation.getter(#validationLibrary),
        ),
      ) as _i20.ValidationLibrary);

  @override
  _i21.ValidationResult validateAthleteData(
          Map<String, dynamic>? athleteData) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateAthleteData,
          [athleteData],
        ),
        returnValue: _FakeValidationResult_22(
          this,
          Invocation.method(
            #validateAthleteData,
            [athleteData],
          ),
        ),
      ) as _i21.ValidationResult);
}

/// A class which mocks [CreateNewAthleteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateNewAthleteUseCase extends _i1.Mock
    implements _i57.CreateNewAthleteUseCase {
  MockCreateNewAthleteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<_i8.Result<_i18.Athlete>> execute(
    Map<String, dynamic>? athleteData,
    List<String>? sportIds,
    _i34.ImageData? avatar,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            athleteData,
            sportIds,
            avatar,
          ],
        ),
        returnValue: _i25.Future<_i8.Result<_i18.Athlete>>.value(
            _FakeResult_6<_i18.Athlete>(
          this,
          Invocation.method(
            #execute,
            [
              athleteData,
              sportIds,
              avatar,
            ],
          ),
        )),
      ) as _i25.Future<_i8.Result<_i18.Athlete>>);
}

/// A class which mocks [CreateGroupUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateGroupUseCase extends _i1.Mock
    implements _i58.CreateGroupUseCase {
  MockCreateGroupUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.Future<_i8.Result<_i19.Group>> execute(
    Map<String, dynamic>? groupData,
    String? name,
    String? description,
    _i13.Sport? sport, {
    _i34.ImageData? avatarImage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            groupData,
            name,
            description,
            sport,
          ],
          {#avatarImage: avatarImage},
        ),
        returnValue:
            _i25.Future<_i8.Result<_i19.Group>>.value(_FakeResult_6<_i19.Group>(
          this,
          Invocation.method(
            #execute,
            [
              groupData,
              name,
              description,
              sport,
            ],
            {#avatarImage: avatarImage},
          ),
        )),
      ) as _i25.Future<_i8.Result<_i19.Group>>);
}
