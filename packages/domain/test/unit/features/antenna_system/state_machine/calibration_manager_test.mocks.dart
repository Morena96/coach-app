// Mocks generated by Mockito 5.4.4 from annotations
// in domain/test/unit/features/antenna_system/state_machine/calibration_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:domain/features/antenna_system/calibration/calibration_notifier.dart'
    as _i6;
import 'package:domain/features/antenna_system/repositories/antenna_command_repository.dart'
    as _i5;
import 'package:domain/features/antenna_system/repositories/antenna_data_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AntennaDataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAntennaDataRepository extends _i1.Mock
    implements _i2.AntennaDataRepository {
  MockAntennaDataRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.Uint8List> getDataStream(String? portName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataStream,
          [portName],
        ),
        returnValue: _i3.Stream<_i4.Uint8List>.empty(),
      ) as _i3.Stream<_i4.Uint8List>);

  @override
  _i3.Stream<(String, _i4.Uint8List)> getAllDataStreams() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllDataStreams,
          [],
        ),
        returnValue: _i3.Stream<(String, _i4.Uint8List)>.empty(),
      ) as _i3.Stream<(String, _i4.Uint8List)>);
}

/// A class which mocks [AntennaCommandRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAntennaCommandRepository extends _i1.Mock
    implements _i5.AntennaCommandRepository {
  MockAntennaCommandRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> sendCommand(
    String? portName,
    _i4.Uint8List? command,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendCommand,
          [
            portName,
            command,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> sendCommandToAll(_i4.Uint8List? command) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendCommandToAll,
          [command],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> closePort(String? portName) => (super.noSuchMethod(
        Invocation.method(
          #closePort,
          [portName],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> closeAllPorts() => (super.noSuchMethod(
        Invocation.method(
          #closeAllPorts,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [CalibrationNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalibrationNotifier extends _i1.Mock
    implements _i6.CalibrationNotifier {
  MockCalibrationNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onProgress(double? progress) => super.noSuchMethod(
        Invocation.method(
          #onProgress,
          [progress],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onComplete() => super.noSuchMethod(
        Invocation.method(
          #onComplete,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(String? message) => super.noSuchMethod(
        Invocation.method(
          #onError,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}
