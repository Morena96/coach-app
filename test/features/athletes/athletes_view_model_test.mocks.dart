// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/features/athletes/athletes_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:application/athletes/use_cases/create_new_athlete_use_case.dart'
    as _i12;
import 'package:application/athletes/use_cases/delete_athlete_use_case.dart'
    as _i10;
import 'package:application/athletes/use_cases/get_all_athletes_by_page_use_case.dart'
    as _i9;
import 'package:application/athletes/use_cases/get_athlete_use_case.dart'
    as _i14;
import 'package:application/athletes/use_cases/restore_athlete_use_case.dart'
    as _i11;
import 'package:application/athletes/use_cases/update_athlete_use_case.dart'
    as _i15;
import 'package:domain/features/athletes/entities/athlete.dart' as _i5;
import 'package:domain/features/athletes/repositories/athletes.dart' as _i3;
import 'package:domain/features/athletes/value_objects/athlete_filter_criteria.dart'
    as _i7;
import 'package:domain/features/athletes/value_objects/athlete_sort_criteria.dart'
    as _i8;
import 'package:domain/features/avatars/entities/image_data.dart' as _i13;
import 'package:domain/features/shared/utilities/result.dart' as _i2;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAthletes_1 extends _i1.SmartFake implements _i3.Athletes {
  _FakeAthletes_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Athletes].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthletes extends _i1.Mock implements _i3.Athletes {
  MockAthletes() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.Athlete>>> getAllAthletes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAthletes,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Athlete>>>.value(
            _FakeResult_0<List<_i5.Athlete>>(
          this,
          Invocation.method(
            #getAllAthletes,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Athlete>>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Athlete>>> getAthletesByFilterCriteria(
          _i6.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Athlete>>>.value(
            _FakeResult_0<List<_i5.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByFilterCriteria,
            [filterCriteria],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Athlete>>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Athlete>>> getAthletesByPage(
    int? page,
    int? pageSize, {
    _i7.AthleteFilterCriteria? filterCriteria,
    _i8.AthleteSortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByPage,
          [
            page,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Athlete>>>.value(
            _FakeResult_0<List<_i5.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByPage,
            [
              page,
              pageSize,
            ],
            {
              #filterCriteria: filterCriteria,
              #sortCriteria: sortCriteria,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Athlete>>>);

  @override
  _i4.Future<_i2.Result<_i5.Athlete>> getAthleteById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthleteById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.Athlete>>.value(
            _FakeResult_0<_i5.Athlete>(
          this,
          Invocation.method(
            #getAthleteById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Athlete>>);

  @override
  _i4.Future<_i2.Result<_i5.Athlete>> addAthlete(_i5.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAthlete,
          [athlete],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.Athlete>>.value(
            _FakeResult_0<_i5.Athlete>(
          this,
          Invocation.method(
            #addAthlete,
            [athlete],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Athlete>>);

  @override
  _i4.Future<_i2.Result<void>> updateAthlete(_i5.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAthlete,
          [athlete],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #updateAthlete,
            [athlete],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<void>> deleteAthlete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAthlete,
          [id],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #deleteAthlete,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Athlete>>> getAthletesByIds(
          List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByIds,
          [ids],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Athlete>>>.value(
            _FakeResult_0<List<_i5.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByIds,
            [ids],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Athlete>>>);

  @override
  _i4.Future<_i2.Result<void>> restoreAthlete(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreAthlete,
          [id],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #restoreAthlete,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);
}

/// A class which mocks [GetAllAthletesByPageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllAthletesByPageUseCase extends _i1.Mock
    implements _i9.GetAllAthletesByPageUseCase {
  MockGetAllAthletesByPageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Athletes get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAthletes_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.Athletes);

  @override
  _i4.Future<_i2.Result<List<_i5.Athlete>>> execute(
    int? page,
    int? pageSize, {
    _i7.AthleteFilterCriteria? filterCriteria,
    _i8.AthleteSortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            page,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Athlete>>>.value(
            _FakeResult_0<List<_i5.Athlete>>(
          this,
          Invocation.method(
            #execute,
            [
              page,
              pageSize,
            ],
            {
              #filterCriteria: filterCriteria,
              #sortCriteria: sortCriteria,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Athlete>>>);
}

/// A class which mocks [DeleteAthleteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAthleteUseCase extends _i1.Mock
    implements _i10.DeleteAthleteUseCase {
  MockDeleteAthleteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Athletes get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAthletes_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.Athletes);

  @override
  _i4.Future<_i2.Result<void>> execute(String? athleteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [athleteId],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #execute,
            [athleteId],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);
}

/// A class which mocks [RestoreAthleteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestoreAthleteUseCase extends _i1.Mock
    implements _i11.RestoreAthleteUseCase {
  MockRestoreAthleteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Athletes get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAthletes_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.Athletes);

  @override
  _i4.Future<_i2.Result<void>> execute(String? athleteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [athleteId],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #execute,
            [athleteId],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);
}

/// A class which mocks [CreateNewAthleteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateNewAthleteUseCase extends _i1.Mock
    implements _i12.CreateNewAthleteUseCase {
  MockCreateNewAthleteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.Athlete>> execute(
    Map<String, dynamic>? athleteData,
    List<String>? sportIds,
    _i13.ImageData? avatar,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            athleteData,
            sportIds,
            avatar,
          ],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.Athlete>>.value(
            _FakeResult_0<_i5.Athlete>(
          this,
          Invocation.method(
            #execute,
            [
              athleteData,
              sportIds,
              avatar,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Athlete>>);
}

/// A class which mocks [GetAthleteByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAthleteByIdUseCase extends _i1.Mock
    implements _i14.GetAthleteByIdUseCase {
  MockGetAthleteByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Athletes get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAthletes_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.Athletes);

  @override
  _i4.Future<_i2.Result<_i5.Athlete>> execute(String? athleteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [athleteId],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.Athlete>>.value(
            _FakeResult_0<_i5.Athlete>(
          this,
          Invocation.method(
            #execute,
            [athleteId],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Athlete>>);
}

/// A class which mocks [UpdateAthleteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateAthleteUseCase extends _i1.Mock
    implements _i15.UpdateAthleteUseCase {
  MockUpdateAthleteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<void>> execute(
    _i5.Athlete? athlete,
    Map<String, dynamic>? athleteData,
    _i13.ImageData? avatar,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            athlete,
            athleteData,
            avatar,
          ],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #execute,
            [
              athlete,
              athleteData,
              avatar,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);
}
