// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/features/athletes/presentation/widgets/groups_grid_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:coach_app/core/widgets/multi_filter.dart' as _i7;
import 'package:coach_app/features/athletes/presentation/models/group_view.dart'
    as _i5;
import 'package:coach_app/features/athletes/presentation/models/sport_view.dart'
    as _i15;
import 'package:coach_app/features/athletes/presentation/providers/groups_view_model.dart'
    as _i6;
import 'package:domain/features/athletes/entities/group.dart' as _i12;
import 'package:domain/features/avatars/entities/image_data.dart' as _i16;
import 'package:domain/features/shared/utilities/result.dart' as _i4;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i13;
import 'package:domain/features/shared/value_objects/sort_criteria.dart'
    as _i14;
import 'package:flutter/material.dart' as _i3;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i8;
import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i10;
import 'package:state_notifier/state_notifier.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePagingController_0<PageKeyType, ItemType> extends _i1.SmartFake
    implements _i2.PagingController<PageKeyType, ItemType> {
  _FakePagingController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_1<T> extends _i1.SmartFake
    implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_2<T> extends _i1.SmartFake implements _i4.Result<T> {
  _FakeResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGroupView_3 extends _i1.SmartFake implements _i5.GroupView {
  _FakeGroupView_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GroupsViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupsViewModel extends _i1.Mock implements _i6.GroupsViewModel {
  MockGroupsViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentSports(List<_i7.FilterOption>? _currentSports) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentSports,
          _currentSports,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasActiveFilters => (super.noSuchMethod(
        Invocation.getter(#hasActiveFilters),
        returnValue: false,
      ) as bool);

  @override
  _i2.PagingController<int, _i5.GroupView> get pagingController =>
      (super.noSuchMethod(
        Invocation.getter(#pagingController),
        returnValue: _FakePagingController_0<int, _i5.GroupView>(
          this,
          Invocation.getter(#pagingController),
        ),
      ) as _i2.PagingController<int, _i5.GroupView>);

  @override
  set pagingController(
          _i2.PagingController<int, _i5.GroupView>? _pagingController) =>
      super.noSuchMethod(
        Invocation.setter(
          #pagingController,
          _pagingController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ValueNotifier<bool> get hasActiveFiltersNotifier => (super.noSuchMethod(
        Invocation.getter(#hasActiveFiltersNotifier),
        returnValue: _FakeValueNotifier_1<bool>(
          this,
          Invocation.getter(#hasActiveFiltersNotifier),
        ),
      ) as _i3.ValueNotifier<bool>);

  @override
  set onError(_i8.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i9.Stream<_i10.AsyncValue<void>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i10.AsyncValue<void>>.empty(),
      ) as _i9.Stream<_i10.AsyncValue<void>>);

  @override
  _i10.AsyncValue<void> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i11.dummyValue<_i10.AsyncValue<void>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.AsyncValue<void>);

  @override
  set state(_i10.AsyncValue<void>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.AsyncValue<void> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _i11.dummyValue<_i10.AsyncValue<void>>(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i10.AsyncValue<void>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<_i4.Result<List<_i12.Group>>> fetchItems(
    int? pageKey,
    int? pageSize, {
    _i13.FilterCriteria? filterCriteria,
    _i14.SortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchItems,
          [
            pageKey,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i9.Future<_i4.Result<List<_i12.Group>>>.value(
            _FakeResult_2<List<_i12.Group>>(
          this,
          Invocation.method(
            #fetchItems,
            [
              pageKey,
              pageSize,
            ],
            {
              #filterCriteria: filterCriteria,
              #sortCriteria: sortCriteria,
            },
          ),
        )),
      ) as _i9.Future<_i4.Result<List<_i12.Group>>>);

  @override
  void updateNameFilter(String? name) => super.noSuchMethod(
        Invocation.method(
          #updateNameFilter,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateFilters({List<_i7.FilterOption>? sports}) => super.noSuchMethod(
        Invocation.method(
          #updateFilters,
          [],
          {#sports: sports},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAllFilters() => super.noSuchMethod(
        Invocation.method(
          #clearAllFilters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.GroupView convertItem(_i12.Group? item) => (super.noSuchMethod(
        Invocation.method(
          #convertItem,
          [item],
        ),
        returnValue: _FakeGroupView_3(
          this,
          Invocation.method(
            #convertItem,
            [item],
          ),
        ),
      ) as _i5.GroupView);

  @override
  _i9.Future<_i4.Result<void>> deleteItemFromService(_i5.GroupView? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteItemFromService,
          [item],
        ),
        returnValue: _i9.Future<_i4.Result<void>>.value(_FakeResult_2<void>(
          this,
          Invocation.method(
            #deleteItemFromService,
            [item],
          ),
        )),
      ) as _i9.Future<_i4.Result<void>>);

  @override
  _i9.Future<_i4.Result<_i12.Group>> addGroup(
    Map<String, dynamic>? athlete,
    String? name,
    String? description,
    _i15.SportView? sport,
    _i16.ImageData? avatarImage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addGroup,
          [
            athlete,
            name,
            description,
            sport,
            avatarImage,
          ],
        ),
        returnValue:
            _i9.Future<_i4.Result<_i12.Group>>.value(_FakeResult_2<_i12.Group>(
          this,
          Invocation.method(
            #addGroup,
            [
              athlete,
              name,
              description,
              sport,
              avatarImage,
            ],
          ),
        )),
      ) as _i9.Future<_i4.Result<_i12.Group>>);

  @override
  _i9.Future<_i4.Result<void>> updateGroup(
    _i5.GroupView? group,
    Map<String, dynamic>? groupData,
    _i16.ImageData? avatar,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [
            group,
            groupData,
            avatar,
          ],
        ),
        returnValue: _i9.Future<_i4.Result<void>>.value(_FakeResult_2<void>(
          this,
          Invocation.method(
            #updateGroup,
            [
              group,
              groupData,
              avatar,
            ],
          ),
        )),
      ) as _i9.Future<_i4.Result<void>>);

  @override
  _i9.Future<_i4.Result<_i12.Group>> getGroupById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupById,
          [id],
        ),
        returnValue:
            _i9.Future<_i4.Result<_i12.Group>>.value(_FakeResult_2<_i12.Group>(
          this,
          Invocation.method(
            #getGroupById,
            [id],
          ),
        )),
      ) as _i9.Future<_i4.Result<_i12.Group>>);

  @override
  _i9.Future<bool> restoreGroup(_i5.GroupView? athlete) => (super.noSuchMethod(
        Invocation.method(
          #restoreGroup,
          [athlete],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  void applyCriteria({
    _i13.FilterCriteria? filterCriteria,
    _i14.SortCriteria? sortCriteria,
    bool? reload = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #applyCriteria,
          [],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
            #reload: reload,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<bool> deleteItem(_i5.GroupView? item) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [item],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  void updateHasActiveFilters({required bool? hasActiveFilters}) =>
      super.noSuchMethod(
        Invocation.method(
          #updateHasActiveFilters,
          [],
          {#hasActiveFilters: hasActiveFilters},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i10.AsyncValue<void>? old,
    _i10.AsyncValue<void>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.RemoveListener addListener(
    _i17.Listener<_i10.AsyncValue<void>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i8.RemoveListener);
}
