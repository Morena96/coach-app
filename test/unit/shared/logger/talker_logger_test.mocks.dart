// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/unit/shared/logger/talker_logger_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/features/logging/entities/log_entry.dart' as _i5;
import 'package:domain/features/logging/repositories/log_persistence_manager.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:talker/talker.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTalkerSettings_0 extends _i1.SmartFake
    implements _i2.TalkerSettings {
  _FakeTalkerSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LogPersistenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogPersistenceManager extends _i1.Mock
    implements _i3.LogPersistenceManager {
  MockLogPersistenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> writeLog(_i5.LogEntry? entry) => (super.noSuchMethod(
        Invocation.method(
          #writeLog,
          [entry],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.LogEntry>> readLogs() => (super.noSuchMethod(
        Invocation.method(
          #readLogs,
          [],
        ),
        returnValue: _i4.Future<List<_i5.LogEntry>>.value(<_i5.LogEntry>[]),
      ) as _i4.Future<List<_i5.LogEntry>>);

  @override
  _i4.Future<void> clearLogs() => (super.noSuchMethod(
        Invocation.method(
          #clearLogs,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.LogEntry>> readLogsByLevel(_i5.LogLevel? level) =>
      (super.noSuchMethod(
        Invocation.method(
          #readLogsByLevel,
          [level],
        ),
        returnValue: _i4.Future<List<_i5.LogEntry>>.value(<_i5.LogEntry>[]),
      ) as _i4.Future<List<_i5.LogEntry>>);

  @override
  _i4.Future<List<_i5.LogEntry>> readLogsByDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readLogsByDateRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i4.Future<List<_i5.LogEntry>>.value(<_i5.LogEntry>[]),
      ) as _i4.Future<List<_i5.LogEntry>>);

  @override
  _i4.Future<int> getLogCount() => (super.noSuchMethod(
        Invocation.method(
          #getLogCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> deleteOldLogs(DateTime? cutoffDate) => (super.noSuchMethod(
        Invocation.method(
          #deleteOldLogs,
          [cutoffDate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Talker].
///
/// See the documentation for Mockito's code generation for more information.
class MockTalker extends _i1.Mock implements _i2.Talker {
  MockTalker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TalkerSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeTalkerSettings_0(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i2.TalkerSettings);

  @override
  set settings(_i2.TalkerSettings? _settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          _settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i2.TalkerData> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.TalkerData>.empty(),
      ) as _i4.Stream<_i2.TalkerData>);

  @override
  List<_i2.TalkerData> get history => (super.noSuchMethod(
        Invocation.getter(#history),
        returnValue: <_i2.TalkerData>[],
      ) as List<_i2.TalkerData>);

  @override
  void configure({
    _i2.TalkerLogger? logger,
    _i2.TalkerSettings? settings,
    _i2.TalkerObserver? observer,
    filter,
    _i2.TalkerErrorHandler? errorHandler,
    _i2.TalkerHistory? history,
  }) =>
      throw UnsupportedError(
          r'"configure" cannot be used without a mockito fallback generator.');

  @override
  void handle(
    Object? exception, [
    StackTrace? stackTrace,
    dynamic msg,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #handle,
          [
            exception,
            stackTrace,
            msg,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(
    dynamic message, {
    _i2.LogLevel? logLevel = _i2.LogLevel.debug,
    Object? exception,
    StackTrace? stackTrace,
    _i2.AnsiPen? pen,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
          {
            #logLevel: logLevel,
            #exception: exception,
            #stackTrace: stackTrace,
            #pen: pen,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logTyped(_i2.TalkerLog? log) => super.noSuchMethod(
        Invocation.method(
          #logTyped,
          [log],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void critical(
    dynamic msg, [
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #critical,
          [
            msg,
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debug(
    dynamic msg, [
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [
            msg,
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    dynamic msg, [
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            msg,
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(
    dynamic msg, [
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [
            msg,
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void verbose(
    dynamic msg, [
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #verbose,
          [
            msg,
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    dynamic msg, [
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [
            msg,
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cleanHistory() => super.noSuchMethod(
        Invocation.method(
          #cleanHistory,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void enable() => super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disable() => super.noSuchMethod(
        Invocation.method(
          #disable,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
