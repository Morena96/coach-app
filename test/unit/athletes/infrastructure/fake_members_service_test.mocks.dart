// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/unit/athletes/infrastructure/fake_members_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:domain/features/athletes/data/athletes_service.dart' as _i4;
import 'package:domain/features/athletes/data/group_roles_service.dart' as _i11;
import 'package:domain/features/athletes/data/groups_service.dart' as _i9;
import 'package:domain/features/athletes/entities/athlete.dart' as _i2;
import 'package:domain/features/athletes/entities/group.dart' as _i3;
import 'package:domain/features/athletes/entities/group_role.dart' as _i12;
import 'package:domain/features/athletes/value_objects/athlete_filter_criteria.dart'
    as _i6;
import 'package:domain/features/athletes/value_objects/athlete_sort_criteria.dart'
    as _i7;
import 'package:domain/features/athletes/value_objects/groups_filter_criteria.dart'
    as _i10;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAthlete_0 extends _i1.SmartFake implements _i2.Athlete {
  _FakeAthlete_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGroup_1 extends _i1.SmartFake implements _i3.Group {
  _FakeGroup_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AthletesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthletesService extends _i1.Mock implements _i4.AthletesService {
  MockAthletesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Athlete>> getAllAthletes() => (super.noSuchMethod(
        Invocation.method(
          #getAllAthletes,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Athlete>>.value(<_i2.Athlete>[]),
      ) as _i5.Future<List<_i2.Athlete>>);

  @override
  _i5.Future<List<_i2.Athlete>> getAthletesByPage(
    int? page,
    int? pageSize, {
    _i6.AthleteFilterCriteria? filterCriteria,
    _i7.AthleteSortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByPage,
          [
            page,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i5.Future<List<_i2.Athlete>>.value(<_i2.Athlete>[]),
      ) as _i5.Future<List<_i2.Athlete>>);

  @override
  _i5.Future<List<_i2.Athlete>> getAthletesByFilterCriteria(
          _i8.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i5.Future<List<_i2.Athlete>>.value(<_i2.Athlete>[]),
      ) as _i5.Future<List<_i2.Athlete>>);

  @override
  _i5.Future<_i2.Athlete> getAthleteById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getAthleteById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Athlete>.value(_FakeAthlete_0(
          this,
          Invocation.method(
            #getAthleteById,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Athlete>);

  @override
  _i5.Future<_i2.Athlete> createAthlete(_i2.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAthlete,
          [athlete],
        ),
        returnValue: _i5.Future<_i2.Athlete>.value(_FakeAthlete_0(
          this,
          Invocation.method(
            #createAthlete,
            [athlete],
          ),
        )),
      ) as _i5.Future<_i2.Athlete>);

  @override
  _i5.Future<_i2.Athlete> updateAthlete(_i2.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAthlete,
          [athlete],
        ),
        returnValue: _i5.Future<_i2.Athlete>.value(_FakeAthlete_0(
          this,
          Invocation.method(
            #updateAthlete,
            [athlete],
          ),
        )),
      ) as _i5.Future<_i2.Athlete>);

  @override
  _i5.Future<void> deleteAthlete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAthlete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.Athlete> restoreAthlete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreAthlete,
          [id],
        ),
        returnValue: _i5.Future<_i2.Athlete>.value(_FakeAthlete_0(
          this,
          Invocation.method(
            #restoreAthlete,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Athlete>);

  @override
  _i5.Future<List<_i2.Athlete>> getAthletesByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByIds,
          [ids],
        ),
        returnValue: _i5.Future<List<_i2.Athlete>>.value(<_i2.Athlete>[]),
      ) as _i5.Future<List<_i2.Athlete>>);

  @override
  _i5.Future<void> resetAndRefreshDatabase() => (super.noSuchMethod(
        Invocation.method(
          #resetAndRefreshDatabase,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> initializeDatabase() => (super.noSuchMethod(
        Invocation.method(
          #initializeDatabase,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [GroupsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupsService extends _i1.Mock implements _i9.GroupsService {
  MockGroupsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Group>> getAllGroups() => (super.noSuchMethod(
        Invocation.method(
          #getAllGroups,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Group>>.value(<_i3.Group>[]),
      ) as _i5.Future<List<_i3.Group>>);

  @override
  _i5.Future<List<_i3.Group>> getGroupsByPage(
    int? page,
    int? pageSize, {
    _i10.GroupsFilterCriteria? filterCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsByPage,
          [
            page,
            pageSize,
          ],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i5.Future<List<_i3.Group>>.value(<_i3.Group>[]),
      ) as _i5.Future<List<_i3.Group>>);

  @override
  _i5.Future<List<_i3.Group>> getGroupsByFilterCriteria(
          _i8.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i5.Future<List<_i3.Group>>.value(<_i3.Group>[]),
      ) as _i5.Future<List<_i3.Group>>);

  @override
  _i5.Future<_i3.Group?> getGroupById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getGroupById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Group?>.value(),
      ) as _i5.Future<_i3.Group?>);

  @override
  _i5.Future<_i3.Group> createGroup(_i3.Group? group) => (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [group],
        ),
        returnValue: _i5.Future<_i3.Group>.value(_FakeGroup_1(
          this,
          Invocation.method(
            #createGroup,
            [group],
          ),
        )),
      ) as _i5.Future<_i3.Group>);

  @override
  _i5.Future<_i3.Group> updateGroup(_i3.Group? group) => (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [group],
        ),
        returnValue: _i5.Future<_i3.Group>.value(_FakeGroup_1(
          this,
          Invocation.method(
            #updateGroup,
            [group],
          ),
        )),
      ) as _i5.Future<_i3.Group>);

  @override
  _i5.Future<void> deleteGroup(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> restoreGroup(String? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreGroup,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [GroupRolesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupRolesService extends _i1.Mock implements _i11.GroupRolesService {
  MockGroupRolesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i12.GroupRole>> getAllRoles() => (super.noSuchMethod(
        Invocation.method(
          #getAllRoles,
          [],
        ),
        returnValue: _i5.Future<List<_i12.GroupRole>>.value(<_i12.GroupRole>[]),
      ) as _i5.Future<List<_i12.GroupRole>>);

  @override
  _i5.Future<_i12.GroupRole?> getRoleByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoleByName,
          [name],
        ),
        returnValue: _i5.Future<_i12.GroupRole?>.value(),
      ) as _i5.Future<_i12.GroupRole?>);
}
