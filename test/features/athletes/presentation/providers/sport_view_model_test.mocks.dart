// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/features/athletes/presentation/providers/sport_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/features/athletes/entities/sport.dart' as _i5;
import 'package:domain/features/athletes/repositories/sports.dart' as _i3;
import 'package:domain/features/athletes/value_objects/sport_filter_criteria.dart'
    as _i6;
import 'package:domain/features/shared/utilities/result.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Sports].
///
/// See the documentation for Mockito's code generation for more information.
class MockSports extends _i1.Mock implements _i3.Sports {
  MockSports() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.Sport>>> getAllSports(
          {_i6.SportFilterCriteria? filterCriteria}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSports,
          [],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Sport>>>.value(
            _FakeResult_0<List<_i5.Sport>>(
          this,
          Invocation.method(
            #getAllSports,
            [],
            {#filterCriteria: filterCriteria},
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Sport>>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Sport>>> getSportsByPage(
    int? page,
    int? pageSize, {
    _i6.SportFilterCriteria? filterCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByPage,
          [
            page,
            pageSize,
          ],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Sport>>>.value(
            _FakeResult_0<List<_i5.Sport>>(
          this,
          Invocation.method(
            #getSportsByPage,
            [
              page,
              pageSize,
            ],
            {#filterCriteria: filterCriteria},
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Sport>>>);

  @override
  _i4.Future<_i2.Result<List<_i5.Sport>>> getSportsByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByIds,
          [ids],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Sport>>>.value(
            _FakeResult_0<List<_i5.Sport>>(
          this,
          Invocation.method(
            #getSportsByIds,
            [ids],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Sport>>>);

  @override
  _i4.Future<_i2.Result<_i5.Sport>> createSport(_i5.Sport? sport) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSport,
          [sport],
        ),
        returnValue:
            _i4.Future<_i2.Result<_i5.Sport>>.value(_FakeResult_0<_i5.Sport>(
          this,
          Invocation.method(
            #createSport,
            [sport],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Sport>>);

  @override
  _i4.Future<_i2.Result<void>> deleteSport(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSport,
          [id],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #deleteSport,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<_i5.Sport>> getSportById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportById,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Result<_i5.Sport>>.value(_FakeResult_0<_i5.Sport>(
          this,
          Invocation.method(
            #getSportById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Sport>>);

  @override
  _i4.Future<_i2.Result<_i5.Sport>> updateSport(_i5.Sport? sport) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSport,
          [sport],
        ),
        returnValue:
            _i4.Future<_i2.Result<_i5.Sport>>.value(_FakeResult_0<_i5.Sport>(
          this,
          Invocation.method(
            #updateSport,
            [sport],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Sport>>);
}
