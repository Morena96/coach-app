// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/unit/athletes/data/members_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/features/athletes/data/members_service.dart' as _i3;
import 'package:domain/features/athletes/entities/group_role.dart' as _i5;
import 'package:domain/features/athletes/entities/member.dart' as _i2;
import 'package:domain/features/logging/entities/log_entry.dart' as _i7;
import 'package:domain/features/logging/repositories/logger.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMember_0 extends _i1.SmartFake implements _i2.Member {
  _FakeMember_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MembersService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMembersService extends _i1.Mock implements _i3.MembersService {
  MockMembersService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Member>> getMembersForGroup(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMembersForGroup,
          [groupId],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<_i2.Member?> getMemberByAthleteAndGroup(
    String? athleteId,
    String? groupId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberByAthleteAndGroup,
          [
            athleteId,
            groupId,
          ],
        ),
        returnValue: _i4.Future<_i2.Member?>.value(),
      ) as _i4.Future<_i2.Member?>);

  @override
  _i4.Future<_i2.Member> addMemberToGroup(
    String? athleteId,
    String? groupId,
    _i5.GroupRole? role,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMemberToGroup,
          [
            athleteId,
            groupId,
            role,
          ],
        ),
        returnValue: _i4.Future<_i2.Member>.value(_FakeMember_0(
          this,
          Invocation.method(
            #addMemberToGroup,
            [
              athleteId,
              groupId,
              role,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Member>);

  @override
  _i4.Future<_i2.Member> updateMemberRole(
    String? memberId,
    _i5.GroupRole? newRole,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMemberRole,
          [
            memberId,
            newRole,
          ],
        ),
        returnValue: _i4.Future<_i2.Member>.value(_FakeMember_0(
          this,
          Invocation.method(
            #updateMemberRole,
            [
              memberId,
              newRole,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Member>);

  @override
  _i4.Future<void> removeMembersFromGroup(
    String? groupId,
    String? memberIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMembersFromGroup,
          [
            groupId,
            memberIds,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Member>> getGroupsForAthlete(String? athleteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsForAthlete,
          [athleteId],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<bool> isAthleteMemberOfGroup(
    String? athleteId,
    String? groupId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isAthleteMemberOfGroup,
          [
            athleteId,
            groupId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getMemberCountForGroup(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberCountForGroup,
          [groupId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.Member>> getMembersForGroupPaginated(
    String? groupId,
    int? page,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMembersForGroupPaginated,
          [
            groupId,
            page,
            pageSize,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<List<_i2.Member>> searchMembersInGroup(
    String? groupId,
    String? searchTerm,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMembersInGroup,
          [
            groupId,
            searchTerm,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<List<_i2.Member>> batchAddMembersToGroup(
    String? groupId,
    List<String>? athleteIds,
    _i5.GroupRole? role,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchAddMembersToGroup,
          [
            groupId,
            athleteIds,
            role,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<List<_i2.Member>> batchAddGroupsToMember(
    String? athleteId,
    List<String>? groupIds,
    _i5.GroupRole? role,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchAddGroupsToMember,
          [
            athleteId,
            groupIds,
            role,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<void> batchRemoveMembersFromGroup(
    String? groupId,
    List<String>? memberIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchRemoveMembersFromGroup,
          [
            groupId,
            memberIds,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, List<_i2.Member>>> getGroupsForAthletes(
          List<String>? athleteIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsForAthletes,
          [athleteIds],
        ),
        returnValue: _i4.Future<Map<String, List<_i2.Member>>>.value(
            <String, List<_i2.Member>>{}),
      ) as _i4.Future<Map<String, List<_i2.Member>>>);

  @override
  _i4.Future<Map<String, bool>> areAthletesMembersOfGroup(
    List<String>? athleteIds,
    String? groupId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #areAthletesMembersOfGroup,
          [
            athleteIds,
            groupId,
          ],
        ),
        returnValue: _i4.Future<Map<String, bool>>.value(<String, bool>{}),
      ) as _i4.Future<Map<String, bool>>);
}

/// A class which mocks [LoggerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerRepository extends _i1.Mock implements _i6.LoggerRepository {
  MockLoggerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i7.LogEntry> get logStream => (super.noSuchMethod(
        Invocation.getter(#logStream),
        returnValue: _i4.Stream<_i7.LogEntry>.empty(),
      ) as _i4.Stream<_i7.LogEntry>);

  @override
  void debug(String? message) => super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message) => super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message) => super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i7.LogEntry>> getLogsByPage(
    int? page,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogsByPage,
          [
            page,
            pageSize,
          ],
        ),
        returnValue: _i4.Future<List<_i7.LogEntry>>.value(<_i7.LogEntry>[]),
      ) as _i4.Future<List<_i7.LogEntry>>);
}
