// Mocks generated by Mockito 5.4.4 from annotations
// in application/test/athletes/application/use_cases/create_new_athlete_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:domain/features/athletes/entities/athlete.dart' as _i8;
import 'package:domain/features/athletes/entities/sport.dart' as _i14;
import 'package:domain/features/athletes/repositories/athletes.dart' as _i6;
import 'package:domain/features/athletes/repositories/sports.dart' as _i13;
import 'package:domain/features/athletes/services/athlete_validation_service.dart'
    as _i12;
import 'package:domain/features/athletes/services/validation_library.dart'
    as _i3;
import 'package:domain/features/athletes/value_objects/athlete_filter_criteria.dart'
    as _i10;
import 'package:domain/features/athletes/value_objects/athlete_sort_criteria.dart'
    as _i11;
import 'package:domain/features/athletes/value_objects/sport_filter_criteria.dart'
    as _i15;
import 'package:domain/features/avatars/entities/avatar.dart' as _i5;
import 'package:domain/features/avatars/entities/image_data.dart' as _i17;
import 'package:domain/features/avatars/repositories/avatar_repository.dart'
    as _i16;
import 'package:domain/features/shared/utilities/result.dart' as _i2;
import 'package:domain/features/shared/utilities/validation/validation_result.dart'
    as _i4;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValidationLibrary_1 extends _i1.SmartFake
    implements _i3.ValidationLibrary {
  _FakeValidationLibrary_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValidationResult_2 extends _i1.SmartFake
    implements _i4.ValidationResult {
  _FakeValidationResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAvatar_3 extends _i1.SmartFake implements _i5.Avatar {
  _FakeAvatar_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Athletes].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthletes extends _i1.Mock implements _i6.Athletes {
  MockAthletes() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Result<List<_i8.Athlete>>> getAllAthletes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAthletes,
          [],
        ),
        returnValue: _i7.Future<_i2.Result<List<_i8.Athlete>>>.value(
            _FakeResult_0<List<_i8.Athlete>>(
          this,
          Invocation.method(
            #getAllAthletes,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Result<List<_i8.Athlete>>>);

  @override
  _i7.Future<_i2.Result<List<_i8.Athlete>>> getAthletesByFilterCriteria(
          _i9.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i7.Future<_i2.Result<List<_i8.Athlete>>>.value(
            _FakeResult_0<List<_i8.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByFilterCriteria,
            [filterCriteria],
          ),
        )),
      ) as _i7.Future<_i2.Result<List<_i8.Athlete>>>);

  @override
  _i7.Future<_i2.Result<List<_i8.Athlete>>> getAthletesByPage(
    int? page,
    int? pageSize, {
    _i10.AthleteFilterCriteria? filterCriteria,
    _i11.AthleteSortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByPage,
          [
            page,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i7.Future<_i2.Result<List<_i8.Athlete>>>.value(
            _FakeResult_0<List<_i8.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByPage,
            [
              page,
              pageSize,
            ],
            {
              #filterCriteria: filterCriteria,
              #sortCriteria: sortCriteria,
            },
          ),
        )),
      ) as _i7.Future<_i2.Result<List<_i8.Athlete>>>);

  @override
  _i7.Future<_i2.Result<_i8.Athlete>> getAthleteById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthleteById,
          [id],
        ),
        returnValue: _i7.Future<_i2.Result<_i8.Athlete>>.value(
            _FakeResult_0<_i8.Athlete>(
          this,
          Invocation.method(
            #getAthleteById,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.Result<_i8.Athlete>>);

  @override
  _i7.Future<_i2.Result<_i8.Athlete>> addAthlete(_i8.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAthlete,
          [athlete],
        ),
        returnValue: _i7.Future<_i2.Result<_i8.Athlete>>.value(
            _FakeResult_0<_i8.Athlete>(
          this,
          Invocation.method(
            #addAthlete,
            [athlete],
          ),
        )),
      ) as _i7.Future<_i2.Result<_i8.Athlete>>);

  @override
  _i7.Future<_i2.Result<void>> updateAthlete(_i8.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAthlete,
          [athlete],
        ),
        returnValue: _i7.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #updateAthlete,
            [athlete],
          ),
        )),
      ) as _i7.Future<_i2.Result<void>>);

  @override
  _i7.Future<_i2.Result<void>> deleteAthlete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAthlete,
          [id],
        ),
        returnValue: _i7.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #deleteAthlete,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.Result<void>>);

  @override
  _i7.Future<_i2.Result<List<_i8.Athlete>>> getAthletesByIds(
          List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByIds,
          [ids],
        ),
        returnValue: _i7.Future<_i2.Result<List<_i8.Athlete>>>.value(
            _FakeResult_0<List<_i8.Athlete>>(
          this,
          Invocation.method(
            #getAthletesByIds,
            [ids],
          ),
        )),
      ) as _i7.Future<_i2.Result<List<_i8.Athlete>>>);

  @override
  _i7.Future<_i2.Result<void>> restoreAthlete(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreAthlete,
          [id],
        ),
        returnValue: _i7.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #restoreAthlete,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.Result<void>>);
}

/// A class which mocks [AthleteValidationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthleteValidationService extends _i1.Mock
    implements _i12.AthleteValidationService {
  MockAthleteValidationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ValidationLibrary get validationLibrary => (super.noSuchMethod(
        Invocation.getter(#validationLibrary),
        returnValue: _FakeValidationLibrary_1(
          this,
          Invocation.getter(#validationLibrary),
        ),
      ) as _i3.ValidationLibrary);

  @override
  _i4.ValidationResult validateAthleteData(Map<String, dynamic>? athleteData) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateAthleteData,
          [athleteData],
        ),
        returnValue: _FakeValidationResult_2(
          this,
          Invocation.method(
            #validateAthleteData,
            [athleteData],
          ),
        ),
      ) as _i4.ValidationResult);
}

/// A class which mocks [Sports].
///
/// See the documentation for Mockito's code generation for more information.
class MockSports extends _i1.Mock implements _i13.Sports {
  MockSports() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Result<List<_i14.Sport>>> getAllSports(
          {_i15.SportFilterCriteria? filterCriteria}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSports,
          [],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i7.Future<_i2.Result<List<_i14.Sport>>>.value(
            _FakeResult_0<List<_i14.Sport>>(
          this,
          Invocation.method(
            #getAllSports,
            [],
            {#filterCriteria: filterCriteria},
          ),
        )),
      ) as _i7.Future<_i2.Result<List<_i14.Sport>>>);

  @override
  _i7.Future<_i2.Result<List<_i14.Sport>>> getSportsByPage(
    int? page,
    int? pageSize, {
    _i15.SportFilterCriteria? filterCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByPage,
          [
            page,
            pageSize,
          ],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i7.Future<_i2.Result<List<_i14.Sport>>>.value(
            _FakeResult_0<List<_i14.Sport>>(
          this,
          Invocation.method(
            #getSportsByPage,
            [
              page,
              pageSize,
            ],
            {#filterCriteria: filterCriteria},
          ),
        )),
      ) as _i7.Future<_i2.Result<List<_i14.Sport>>>);

  @override
  _i7.Future<_i2.Result<List<_i14.Sport>>> getSportsByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportsByIds,
          [ids],
        ),
        returnValue: _i7.Future<_i2.Result<List<_i14.Sport>>>.value(
            _FakeResult_0<List<_i14.Sport>>(
          this,
          Invocation.method(
            #getSportsByIds,
            [ids],
          ),
        )),
      ) as _i7.Future<_i2.Result<List<_i14.Sport>>>);

  @override
  _i7.Future<_i2.Result<_i14.Sport>> createSport(_i14.Sport? sport) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSport,
          [sport],
        ),
        returnValue:
            _i7.Future<_i2.Result<_i14.Sport>>.value(_FakeResult_0<_i14.Sport>(
          this,
          Invocation.method(
            #createSport,
            [sport],
          ),
        )),
      ) as _i7.Future<_i2.Result<_i14.Sport>>);

  @override
  _i7.Future<_i2.Result<void>> deleteSport(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSport,
          [id],
        ),
        returnValue: _i7.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #deleteSport,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.Result<void>>);

  @override
  _i7.Future<_i2.Result<_i14.Sport>> getSportById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportById,
          [id],
        ),
        returnValue:
            _i7.Future<_i2.Result<_i14.Sport>>.value(_FakeResult_0<_i14.Sport>(
          this,
          Invocation.method(
            #getSportById,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.Result<_i14.Sport>>);

  @override
  _i7.Future<_i2.Result<_i14.Sport>> updateSport(_i14.Sport? sport) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSport,
          [sport],
        ),
        returnValue:
            _i7.Future<_i2.Result<_i14.Sport>>.value(_FakeResult_0<_i14.Sport>(
          this,
          Invocation.method(
            #updateSport,
            [sport],
          ),
        )),
      ) as _i7.Future<_i2.Result<_i14.Sport>>);
}

/// A class which mocks [AvatarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAvatarRepository extends _i1.Mock implements _i16.AvatarRepository {
  MockAvatarRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Avatar> saveAvatar(
    String? id,
    _i17.ImageData? imageData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAvatar,
          [
            id,
            imageData,
          ],
        ),
        returnValue: _i7.Future<_i5.Avatar>.value(_FakeAvatar_3(
          this,
          Invocation.method(
            #saveAvatar,
            [
              id,
              imageData,
            ],
          ),
        )),
      ) as _i7.Future<_i5.Avatar>);

  @override
  _i7.Future<_i17.ImageData?> getAvatarImage(String? avatarId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvatarImage,
          [avatarId],
        ),
        returnValue: _i7.Future<_i17.ImageData?>.value(),
      ) as _i7.Future<_i17.ImageData?>);

  @override
  _i7.Future<void> downloadAvatar(
    String? avatarId,
    String? remoteUrl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadAvatar,
          [
            avatarId,
            remoteUrl,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> markAvatarAsSynced(_i5.Avatar? avatar) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAvatarAsSynced,
          [avatar],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i5.Avatar> getAvatar(String? avatarId) => (super.noSuchMethod(
        Invocation.method(
          #getAvatar,
          [avatarId],
        ),
        returnValue: _i7.Future<_i5.Avatar>.value(_FakeAvatar_3(
          this,
          Invocation.method(
            #getAvatar,
            [avatarId],
          ),
        )),
      ) as _i7.Future<_i5.Avatar>);
}
