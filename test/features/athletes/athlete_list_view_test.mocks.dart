// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/features/athletes/athlete_list_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:io' as _i7;

import 'package:coach_app/core/widgets/multi_filter.dart' as _i9;
import 'package:coach_app/features/athletes/presentation/models/athlete_view.dart'
    as _i6;
import 'package:coach_app/features/athletes/presentation/providers/athletes_view_model.dart'
    as _i8;
import 'package:domain/features/athletes/entities/athlete.dart' as _i13;
import 'package:domain/features/athletes/value_objects/athlete_sort_criteria.dart'
    as _i2;
import 'package:domain/features/avatars/entities/image_data.dart' as _i16;
import 'package:domain/features/shared/utilities/result.dart' as _i5;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i14;
import 'package:domain/features/shared/value_objects/sort_criteria.dart'
    as _i15;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i10;
import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:state_notifier/state_notifier.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAthleteSortCriteria_0 extends _i1.SmartFake
    implements _i2.AthleteSortCriteria {
  _FakeAthleteSortCriteria_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePagingController_1<PageKeyType, ItemType> extends _i1.SmartFake
    implements _i3.PagingController<PageKeyType, ItemType> {
  _FakePagingController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_2<T> extends _i1.SmartFake
    implements _i4.ValueNotifier<T> {
  _FakeValueNotifier_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_3<T> extends _i1.SmartFake implements _i5.Result<T> {
  _FakeResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAthleteView_4 extends _i1.SmartFake implements _i6.AthleteView {
  _FakeAthleteView_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_5 extends _i1.SmartFake implements Uri {
  _FakeUri_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_6 extends _i1.SmartFake implements _i7.Directory {
  _FakeDirectory_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_7 extends _i1.SmartFake
    implements _i7.FileSystemEntity {
  _FakeFileSystemEntity_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_8 extends _i1.SmartFake implements _i7.FileStat {
  _FakeFileStat_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AthletesViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthletesViewModel extends _i1.Mock implements _i8.AthletesViewModel {
  MockAthletesViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentSports(List<_i9.FilterOption>? _currentSports) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentSports,
          _currentSports,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set r(int? _r) => super.noSuchMethod(
        Invocation.setter(
          #r,
          _r,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get currentArchivedFilter => (super.noSuchMethod(
        Invocation.getter(#currentArchivedFilter),
        returnValue: false,
      ) as bool);

  @override
  _i2.AthleteSortCriteria get currentSort => (super.noSuchMethod(
        Invocation.getter(#currentSort),
        returnValue: _FakeAthleteSortCriteria_0(
          this,
          Invocation.getter(#currentSort),
        ),
      ) as _i2.AthleteSortCriteria);

  @override
  bool get hasActiveFilters => (super.noSuchMethod(
        Invocation.getter(#hasActiveFilters),
        returnValue: false,
      ) as bool);

  @override
  _i3.PagingController<int, _i6.AthleteView> get pagingController =>
      (super.noSuchMethod(
        Invocation.getter(#pagingController),
        returnValue: _FakePagingController_1<int, _i6.AthleteView>(
          this,
          Invocation.getter(#pagingController),
        ),
      ) as _i3.PagingController<int, _i6.AthleteView>);

  @override
  set pagingController(
          _i3.PagingController<int, _i6.AthleteView>? _pagingController) =>
      super.noSuchMethod(
        Invocation.setter(
          #pagingController,
          _pagingController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ValueNotifier<bool> get hasActiveFiltersNotifier => (super.noSuchMethod(
        Invocation.getter(#hasActiveFiltersNotifier),
        returnValue: _FakeValueNotifier_2<bool>(
          this,
          Invocation.getter(#hasActiveFiltersNotifier),
        ),
      ) as _i4.ValueNotifier<bool>);

  @override
  set onError(_i10.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i11.Stream<_i10.AsyncValue<void>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i10.AsyncValue<void>>.empty(),
      ) as _i11.Stream<_i10.AsyncValue<void>>);

  @override
  _i10.AsyncValue<void> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i12.dummyValue<_i10.AsyncValue<void>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.AsyncValue<void>);

  @override
  set state(_i10.AsyncValue<void>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.AsyncValue<void> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _i12.dummyValue<_i10.AsyncValue<void>>(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i10.AsyncValue<void>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setCurrentGroupId(String? groupId) => super.noSuchMethod(
        Invocation.method(
          #setCurrentGroupId,
          [groupId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<_i5.Result<List<_i13.Athlete>>> fetchItems(
    int? pageKey,
    int? pageSize, {
    _i14.FilterCriteria? filterCriteria,
    _i15.SortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchItems,
          [
            pageKey,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i11.Future<_i5.Result<List<_i13.Athlete>>>.value(
            _FakeResult_3<List<_i13.Athlete>>(
          this,
          Invocation.method(
            #fetchItems,
            [
              pageKey,
              pageSize,
            ],
            {
              #filterCriteria: filterCriteria,
              #sortCriteria: sortCriteria,
            },
          ),
        )),
      ) as _i11.Future<_i5.Result<List<_i13.Athlete>>>);

  @override
  void updateNameFilter(String? name) => super.noSuchMethod(
        Invocation.method(
          #updateNameFilter,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateFilters({List<_i9.FilterOption>? sports}) => super.noSuchMethod(
        Invocation.method(
          #updateFilters,
          [],
          {#sports: sports},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateArchivedFilter({required bool? isArchived}) => super.noSuchMethod(
        Invocation.method(
          #updateArchivedFilter,
          [],
          {#isArchived: isArchived},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAllFilters() => super.noSuchMethod(
        Invocation.method(
          #clearAllFilters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSort(String? field) => super.noSuchMethod(
        Invocation.method(
          #updateSort,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.AthleteView convertItem(_i13.Athlete? item) => (super.noSuchMethod(
        Invocation.method(
          #convertItem,
          [item],
        ),
        returnValue: _FakeAthleteView_4(
          this,
          Invocation.method(
            #convertItem,
            [item],
          ),
        ),
      ) as _i6.AthleteView);

  @override
  _i11.Future<_i5.Result<void>> deleteItemFromService(_i6.AthleteView? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteItemFromService,
          [item],
        ),
        returnValue: _i11.Future<_i5.Result<void>>.value(_FakeResult_3<void>(
          this,
          Invocation.method(
            #deleteItemFromService,
            [item],
          ),
        )),
      ) as _i11.Future<_i5.Result<void>>);

  @override
  _i11.Future<_i5.Result<_i6.AthleteView>> addAthlete(
    Map<String, dynamic>? athlete,
    List<String>? sportIds,
    _i16.ImageData? avatar,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAthlete,
          [
            athlete,
            sportIds,
            avatar,
          ],
        ),
        returnValue: _i11.Future<_i5.Result<_i6.AthleteView>>.value(
            _FakeResult_3<_i6.AthleteView>(
          this,
          Invocation.method(
            #addAthlete,
            [
              athlete,
              sportIds,
              avatar,
            ],
          ),
        )),
      ) as _i11.Future<_i5.Result<_i6.AthleteView>>);

  @override
  _i11.Future<_i5.Result<void>> updateAthlete(
    _i13.Athlete? athlete,
    Map<String, dynamic>? athleteData,
    _i16.ImageData? avatar,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAthlete,
          [
            athlete,
            athleteData,
            avatar,
          ],
        ),
        returnValue: _i11.Future<_i5.Result<void>>.value(_FakeResult_3<void>(
          this,
          Invocation.method(
            #updateAthlete,
            [
              athlete,
              athleteData,
              avatar,
            ],
          ),
        )),
      ) as _i11.Future<_i5.Result<void>>);

  @override
  _i11.Future<_i5.Result<_i13.Athlete>> getAthleteById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthleteById,
          [id],
        ),
        returnValue: _i11.Future<_i5.Result<_i13.Athlete>>.value(
            _FakeResult_3<_i13.Athlete>(
          this,
          Invocation.method(
            #getAthleteById,
            [id],
          ),
        )),
      ) as _i11.Future<_i5.Result<_i13.Athlete>>);

  @override
  _i11.Future<bool> restoreAthlete(_i6.AthleteView? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreAthlete,
          [athlete],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  void applyCriteria({
    _i14.FilterCriteria? filterCriteria,
    _i15.SortCriteria? sortCriteria,
    bool? reload = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #applyCriteria,
          [],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
            #reload: reload,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<bool> deleteItem(_i6.AthleteView? item) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [item],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  void updateHasActiveFilters({required bool? hasActiveFilters}) =>
      super.noSuchMethod(
        Invocation.method(
          #updateHasActiveFilters,
          [],
          {#hasActiveFilters: hasActiveFilters},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i10.AsyncValue<void>? old,
    _i10.AsyncValue<void>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i10.RemoveListener addListener(
    _i17.Listener<_i10.AsyncValue<void>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i10.RemoveListener);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i7.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_5(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  _i7.Directory get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeDirectory_6(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i7.Directory);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);

  @override
  _i7.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_6(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i7.Directory);

  @override
  _i11.Future<_i7.Directory> create({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#recursive: recursive},
        ),
        returnValue: _i11.Future<_i7.Directory>.value(_FakeDirectory_6(
          this,
          Invocation.method(
            #create,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i11.Future<_i7.Directory>);

  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<_i7.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTemp,
          [prefix],
        ),
        returnValue: _i11.Future<_i7.Directory>.value(_FakeDirectory_6(
          this,
          Invocation.method(
            #createTemp,
            [prefix],
          ),
        )),
      ) as _i11.Future<_i7.Directory>);

  @override
  _i7.Directory createTempSync([String? prefix]) => (super.noSuchMethod(
        Invocation.method(
          #createTempSync,
          [prefix],
        ),
        returnValue: _FakeDirectory_6(
          this,
          Invocation.method(
            #createTempSync,
            [prefix],
          ),
        ),
      ) as _i7.Directory);

  @override
  _i11.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i11.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i11.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i11.Future<_i7.Directory> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i11.Future<_i7.Directory>.value(_FakeDirectory_6(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i11.Future<_i7.Directory>);

  @override
  _i7.Directory renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeDirectory_6(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i7.Directory);

  @override
  _i11.Future<_i7.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i11.Future<_i7.FileSystemEntity>.value(_FakeFileSystemEntity_7(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i11.Future<_i7.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Stream<_i7.FileSystemEntity> list({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: _i11.Stream<_i7.FileSystemEntity>.empty(),
      ) as _i11.Stream<_i7.FileSystemEntity>);

  @override
  List<_i7.FileSystemEntity> listSync({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listSync,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: <_i7.FileSystemEntity>[],
      ) as List<_i7.FileSystemEntity>);

  @override
  _i11.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<_i7.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i11.Future<_i7.FileStat>.value(_FakeFileStat_8(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i11.Future<_i7.FileStat>);

  @override
  _i7.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_8(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i7.FileStat);

  @override
  _i11.Stream<_i7.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i11.Stream<_i7.FileSystemEvent>.empty(),
      ) as _i11.Stream<_i7.FileSystemEvent>);
}
