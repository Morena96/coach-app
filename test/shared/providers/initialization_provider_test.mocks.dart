// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/shared/providers/initialization_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i10;

import 'package:coach_app/core/app_state.dart' as _i9;
import 'package:coach_app/shared/repositories/connectivity_repository.dart'
    as _i3;
import 'package:domain/features/athletes/data/athletes_service.dart' as _i5;
import 'package:domain/features/athletes/entities/athlete.dart' as _i2;
import 'package:domain/features/athletes/value_objects/athlete_filter_criteria.dart'
    as _i6;
import 'package:domain/features/athletes/value_objects/athlete_sort_criteria.dart'
    as _i7;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAthlete_0 extends _i1.SmartFake implements _i2.Athlete {
  _FakeAthlete_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConnectivityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityRepository extends _i1.Mock
    implements _i3.ConnectivityRepository {
  MockConnectivityRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<bool> get connectivityStream => (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AthletesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAthletesService extends _i1.Mock implements _i5.AthletesService {
  MockAthletesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Athlete>> getAllAthletes() => (super.noSuchMethod(
        Invocation.method(
          #getAllAthletes,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Athlete>>.value(<_i2.Athlete>[]),
      ) as _i4.Future<List<_i2.Athlete>>);

  @override
  _i4.Future<List<_i2.Athlete>> getAthletesByPage(
    int? page,
    int? pageSize, {
    _i6.AthleteFilterCriteria? filterCriteria,
    _i7.AthleteSortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByPage,
          [
            page,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i4.Future<List<_i2.Athlete>>.value(<_i2.Athlete>[]),
      ) as _i4.Future<List<_i2.Athlete>>);

  @override
  _i4.Future<List<_i2.Athlete>> getAthletesByFilterCriteria(
          _i8.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i4.Future<List<_i2.Athlete>>.value(<_i2.Athlete>[]),
      ) as _i4.Future<List<_i2.Athlete>>);

  @override
  _i4.Future<_i2.Athlete> getAthleteById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getAthleteById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Athlete>.value(_FakeAthlete_0(
          this,
          Invocation.method(
            #getAthleteById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Athlete>);

  @override
  _i4.Future<_i2.Athlete> createAthlete(_i2.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAthlete,
          [athlete],
        ),
        returnValue: _i4.Future<_i2.Athlete>.value(_FakeAthlete_0(
          this,
          Invocation.method(
            #createAthlete,
            [athlete],
          ),
        )),
      ) as _i4.Future<_i2.Athlete>);

  @override
  _i4.Future<_i2.Athlete> updateAthlete(_i2.Athlete? athlete) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAthlete,
          [athlete],
        ),
        returnValue: _i4.Future<_i2.Athlete>.value(_FakeAthlete_0(
          this,
          Invocation.method(
            #updateAthlete,
            [athlete],
          ),
        )),
      ) as _i4.Future<_i2.Athlete>);

  @override
  _i4.Future<void> deleteAthlete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAthlete,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Athlete> restoreAthlete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreAthlete,
          [id],
        ),
        returnValue: _i4.Future<_i2.Athlete>.value(_FakeAthlete_0(
          this,
          Invocation.method(
            #restoreAthlete,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Athlete>);

  @override
  _i4.Future<List<_i2.Athlete>> getAthletesByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAthletesByIds,
          [ids],
        ),
        returnValue: _i4.Future<List<_i2.Athlete>>.value(<_i2.Athlete>[]),
      ) as _i4.Future<List<_i2.Athlete>>);

  @override
  _i4.Future<void> resetAndRefreshDatabase() => (super.noSuchMethod(
        Invocation.method(
          #resetAndRefreshDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> initializeDatabase() => (super.noSuchMethod(
        Invocation.method(
          #initializeDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AppState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppState extends _i1.Mock implements _i9.AppState {
  MockAppState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setConnectivityStatus(bool? isConnected) => super.noSuchMethod(
        Invocation.method(
          #setConnectivityStatus,
          [isConnected],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
