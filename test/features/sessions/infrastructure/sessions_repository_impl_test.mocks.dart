// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/features/sessions/infrastructure/sessions_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/features/logging/entities/log_entry.dart' as _i10;
import 'package:domain/features/logging/repositories/logger.dart' as _i9;
import 'package:domain/features/sessions/data/sessions_data_service.dart'
    as _i3;
import 'package:domain/features/sessions/entities/gps_data_representation.dart'
    as _i8;
import 'package:domain/features/sessions/entities/session.dart' as _i2;
import 'package:domain/features/sessions/value_objects/sessions_filter_criteria.dart'
    as _i5;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i6;
import 'package:domain/features/shared/value_objects/sort_criteria.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSession_0 extends _i1.SmartFake implements _i2.Session {
  _FakeSession_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SessionsDataService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionsDataService extends _i1.Mock
    implements _i3.SessionsDataService {
  MockSessionsDataService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Session>> getAllSessions() => (super.noSuchMethod(
        Invocation.method(
          #getAllSessions,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Session>>.value(<_i2.Session>[]),
      ) as _i4.Future<List<_i2.Session>>);

  @override
  _i4.Future<List<_i2.Session>> getSessionsByFilterCriteria(
          _i5.SessionsFilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i4.Future<List<_i2.Session>>.value(<_i2.Session>[]),
      ) as _i4.Future<List<_i2.Session>>);

  @override
  _i4.Future<List<_i2.Session>> getSessionsByPage(
    int? page,
    int? pageSize, {
    _i6.FilterCriteria? filterCriteria,
    _i7.SortCriteria? sortCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsByPage,
          [
            page,
            pageSize,
          ],
          {
            #filterCriteria: filterCriteria,
            #sortCriteria: sortCriteria,
          },
        ),
        returnValue: _i4.Future<List<_i2.Session>>.value(<_i2.Session>[]),
      ) as _i4.Future<List<_i2.Session>>);

  @override
  _i4.Future<_i2.Session?> getSessionById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSessionById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Session?>.value(),
      ) as _i4.Future<_i2.Session?>);

  @override
  _i4.Future<_i2.Session> addSession(_i2.Session? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSession,
          [session],
        ),
        returnValue: _i4.Future<_i2.Session>.value(_FakeSession_0(
          this,
          Invocation.method(
            #addSession,
            [session],
          ),
        )),
      ) as _i4.Future<_i2.Session>);

  @override
  _i4.Future<void> updateSession(_i2.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #updateSession,
          [session],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSession(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Session>> getSessionsByIds(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsByIds,
          [ids],
        ),
        returnValue: _i4.Future<List<_i2.Session>>.value(<_i2.Session>[]),
      ) as _i4.Future<List<_i2.Session>>);

  @override
  _i4.Future<List<_i2.Session>> getSessionsForGroup(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsForGroup,
          [groupId],
        ),
        returnValue: _i4.Future<List<_i2.Session>>.value(<_i2.Session>[]),
      ) as _i4.Future<List<_i2.Session>>);

  @override
  _i4.Future<List<_i2.Session>> getSessionsForAthlete(String? athleteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsForAthlete,
          [athleteId],
        ),
        returnValue: _i4.Future<List<_i2.Session>>.value(<_i2.Session>[]),
      ) as _i4.Future<List<_i2.Session>>);

  @override
  _i4.Future<void> addGpsDataRepresentationToSession(
    String? sessionId,
    _i8.GpsDataRepresentation? gpsDataRepresentation,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addGpsDataRepresentationToSession,
          [
            sessionId,
            gpsDataRepresentation,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeGpsDataRepresentationFromSession(
    String? sessionId,
    String? gpsDataRepresentationId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeGpsDataRepresentationFromSession,
          [
            sessionId,
            gpsDataRepresentationId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> resetAndRefreshDatabase() => (super.noSuchMethod(
        Invocation.method(
          #resetAndRefreshDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> initializeDatabase() => (super.noSuchMethod(
        Invocation.method(
          #initializeDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LoggerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerRepository extends _i1.Mock implements _i9.LoggerRepository {
  MockLoggerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i10.LogEntry> get logStream => (super.noSuchMethod(
        Invocation.getter(#logStream),
        returnValue: _i4.Stream<_i10.LogEntry>.empty(),
      ) as _i4.Stream<_i10.LogEntry>);

  @override
  void debug(String? message) => super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message) => super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message) => super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
