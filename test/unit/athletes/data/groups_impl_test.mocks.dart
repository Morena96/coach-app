// Mocks generated by Mockito 5.4.4 from annotations
// in coach_app/test/unit/athletes/data/groups_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/features/athletes/data/group_roles_service.dart' as _i11;
import 'package:domain/features/athletes/data/groups_service.dart' as _i3;
import 'package:domain/features/athletes/data/id_generator.dart' as _i9;
import 'package:domain/features/athletes/entities/group.dart' as _i2;
import 'package:domain/features/athletes/entities/group_role.dart' as _i12;
import 'package:domain/features/athletes/value_objects/groups_filter_criteria.dart'
    as _i5;
import 'package:domain/features/logging/entities/log_entry.dart' as _i8;
import 'package:domain/features/logging/repositories/logger.dart' as _i7;
import 'package:domain/features/shared/value_objects/filter_criteria.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGroup_0 extends _i1.SmartFake implements _i2.Group {
  _FakeGroup_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GroupsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupsService extends _i1.Mock implements _i3.GroupsService {
  MockGroupsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Group>> getAllGroups() => (super.noSuchMethod(
        Invocation.method(
          #getAllGroups,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Group>>.value(<_i2.Group>[]),
      ) as _i4.Future<List<_i2.Group>>);

  @override
  _i4.Future<List<_i2.Group>> getGroupsByPage(
    int? page,
    int? pageSize, {
    _i5.GroupsFilterCriteria? filterCriteria,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsByPage,
          [
            page,
            pageSize,
          ],
          {#filterCriteria: filterCriteria},
        ),
        returnValue: _i4.Future<List<_i2.Group>>.value(<_i2.Group>[]),
      ) as _i4.Future<List<_i2.Group>>);

  @override
  _i4.Future<List<_i2.Group>> getGroupsByFilterCriteria(
          _i6.FilterCriteria? filterCriteria) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupsByFilterCriteria,
          [filterCriteria],
        ),
        returnValue: _i4.Future<List<_i2.Group>>.value(<_i2.Group>[]),
      ) as _i4.Future<List<_i2.Group>>);

  @override
  _i4.Future<_i2.Group?> getGroupById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getGroupById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Group?>.value(),
      ) as _i4.Future<_i2.Group?>);

  @override
  _i4.Future<_i2.Group> createGroup(_i2.Group? group) => (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [group],
        ),
        returnValue: _i4.Future<_i2.Group>.value(_FakeGroup_0(
          this,
          Invocation.method(
            #createGroup,
            [group],
          ),
        )),
      ) as _i4.Future<_i2.Group>);

  @override
  _i4.Future<_i2.Group> updateGroup(_i2.Group? group) => (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [group],
        ),
        returnValue: _i4.Future<_i2.Group>.value(_FakeGroup_0(
          this,
          Invocation.method(
            #updateGroup,
            [group],
          ),
        )),
      ) as _i4.Future<_i2.Group>);

  @override
  _i4.Future<void> deleteGroup(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> restoreGroup(String? id) => (super.noSuchMethod(
        Invocation.method(
          #restoreGroup,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LoggerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerRepository extends _i1.Mock implements _i7.LoggerRepository {
  MockLoggerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i8.LogEntry> get logStream => (super.noSuchMethod(
        Invocation.getter(#logStream),
        returnValue: _i4.Stream<_i8.LogEntry>.empty(),
      ) as _i4.Stream<_i8.LogEntry>);

  @override
  void debug(String? message) => super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message) => super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message) => super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IdGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdGenerator extends _i1.Mock implements _i9.IdGenerator {
  MockIdGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generate() => (super.noSuchMethod(
        Invocation.method(
          #generate,
          [],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #generate,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [GroupRolesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupRolesService extends _i1.Mock implements _i11.GroupRolesService {
  MockGroupRolesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i12.GroupRole>> getAllRoles() => (super.noSuchMethod(
        Invocation.method(
          #getAllRoles,
          [],
        ),
        returnValue: _i4.Future<List<_i12.GroupRole>>.value(<_i12.GroupRole>[]),
      ) as _i4.Future<List<_i12.GroupRole>>);

  @override
  _i4.Future<_i12.GroupRole?> getRoleByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoleByName,
          [name],
        ),
        returnValue: _i4.Future<_i12.GroupRole?>.value(),
      ) as _i4.Future<_i12.GroupRole?>);
}
